; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\vga-min.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\vga-min.d --cpu=Cortex-M0 --apcs=interwork -O3 -Otime --diag_suppress=9931 -IC:\CAD\Keil_v5\ARM\RV31\INC -IC:\CAD\Keil_v5\ARM\CMSIS\Include -IC:\CAD\Keil_v5\ARM\Inc\ST\STM32F0xx -D__UVISION_VERSION=514 -DSTM32F030 --omf_browse=.\objects\vga-min.crf vga-min.c]
                          THUMB

                          AREA ||i.Delay||, CODE, READONLY, ALIGN=2

                  Delay PROC
;;;268    // Time delay in 32us ticks - Hsync
;;;269    void Delay(uint16_t Ticks)
000000  4902              LDR      r1,|L1.12|
;;;270    {
;;;271    	MicroTimer0 = Ticks;
000002  7008              STRB     r0,[r1,#0]
                  |L1.4|
;;;272    	
;;;273    	while(MicroTimer0)
000004  7808              LDRB     r0,[r1,#0]  ; MicroTimer0
000006  2800              CMP      r0,#0
000008  d1fc              BNE      |L1.4|
;;;274    		/* Busy wait */;
;;;275    }
00000a  4770              BX       lr
                          ENDP

                  |L1.12|
                          DCD      ||.data||

                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=2

                  PendSV_Handler PROC
;;;253    // Put ARM core to sleep and wait for TIM3 OC2 IRQ to wake it up.
;;;254    void PendSV_Handler(void)
000000  2001              MOVS     r0,#1
000002  4a07              LDR      r2,|L2.32|
000004  06c0              LSLS     r0,r0,#27
000006  6010              STR      r0,[r2,#0]
000008  2120              MOVS     r1,#0x20
00000a  6011              STR      r1,[r2,#0]
;;;255    {
;;;256    	NVIC_DisableIRQ(USART1_IRQn);
;;;257      NVIC_DisableIRQ(EXTI0_1_IRQn);
;;;258    	
;;;259    	// Clear pendSV flag
;;;260    	SCB->ICSR |= SCB_ICSR_PENDSVCLR_Msk;
00000c  4a05              LDR      r2,|L2.36|
00000e  6853              LDR      r3,[r2,#4]
000010  4303              ORRS     r3,r3,r0
000012  6053              STR      r3,[r2,#4]
;;;261    	
;;;262    	__WFI();		// Sleep here
000014  bf30              WFI      
000016  4a04              LDR      r2,|L2.40|
000018  6010              STR      r0,[r2,#0]
00001a  6011              STR      r1,[r2,#0]
;;;263    	
;;;264    	NVIC_EnableIRQ(USART1_IRQn);
;;;265    	NVIC_EnableIRQ(EXTI0_1_IRQn);	
;;;266     }
00001c  4770              BX       lr
;;;267    
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      0xe000e180
                  |L2.36|
                          DCD      0xe000ed00
                  |L2.40|
                          DCD      0xe000e100

                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM3_IRQHandler PROC
;;;119    
;;;120    void TIM3_IRQHandler(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;121    {	uint8_t i,*textbuf,*scanline,*font;
;;;122    	
;;;123    	if(TIM3->SR & TIM_SR_CC2IF)
000002  4d82              LDR      r5,|L3.524|
000004  8a28              LDRH     r0,[r5,#0x10]
;;;124    	{
;;;125    		DMA1_Channel3->CCR = DMA_CCR_PL_1|DMA_CCR_PL_0|DMA_CCR_MINC|				// Very high priority, memory increment
;;;126    												 DMA_CCR_DIR|SPI_DMA_CCR_SIZE|DMA_CCR_EN;				// trigger DMA transfer
;;;127    
;;;128    		if(VGA.Render)																											// render loop
000006  4c83              LDR      r4,|L3.532|
000008  0743              LSLS     r3,r0,#29             ;123
;;;129    		{ 
;;;130    	    scanline = ScanLineBuf+VGA_PRE_RENDER+1;			
;;;131    	    font = (uint8_t *) &FONT_TABLE[VGA.Font_CurRow];			
00000a  4881              LDR      r0,|L3.528|
00000c  7aa1              LDRB     r1,[r4,#0xa]
00000e  2700              MOVS     r7,#0                 ;123
000010  1809              ADDS     r1,r1,r0
000012  7ae2              LDRB     r2,[r4,#0xb]          ;128
000014  6860              LDR      r0,[r4,#4]            ;123
000016  2b00              CMP      r3,#0                 ;123
000018  da57              BGE      |L3.202|
00001a  4b80              LDR      r3,|L3.540|
00001c  4e7e              LDR      r6,|L3.536|
00001e  631e              STR      r6,[r3,#0x30]         ;125
000020  07d2              LSLS     r2,r2,#31             ;128
000022  d045              BEQ      |L3.176|
000024  4a7e              LDR      r2,|L3.544|
;;;132          textbuf = VGA.TextBuffer_Ptr+VGA_PRE_RENDER;
;;;133    			
;;;134    			// render rest of the line
;;;135    	    for(i=0;i<VGA_POST_RENDER/2;i++)
000026  2312              MOVS     r3,#0x12
000028  1d80              ADDS     r0,r0,#6
                  |L3.42|
;;;136    		  {
;;;137    	      *scanline++ = font[(*textbuf++)*FONT_ROW];
00002a  7886              LDRB     r6,[r0,#2]
00002c  0136              LSLS     r6,r6,#4
00002e  5d8e              LDRB     r6,[r1,r6]
000030  7096              STRB     r6,[r2,#2]
;;;138    			  *scanline++ = font[(*textbuf++)*FONT_ROW];
000032  78c6              LDRB     r6,[r0,#3]
000034  0136              LSLS     r6,r6,#4
000036  5d8e              LDRB     r6,[r1,r6]
000038  70d6              STRB     r6,[r2,#3]
00003a  7906              LDRB     r6,[r0,#4]            ;137
00003c  0136              LSLS     r6,r6,#4              ;137
00003e  5d8e              LDRB     r6,[r1,r6]            ;137
000040  7116              STRB     r6,[r2,#4]            ;137
000042  7946              LDRB     r6,[r0,#5]
000044  1d00              ADDS     r0,r0,#4
000046  0136              LSLS     r6,r6,#4
000048  5d8e              LDRB     r6,[r1,r6]
00004a  7156              STRB     r6,[r2,#5]
00004c  1d12              ADDS     r2,r2,#4
00004e  1e5b              SUBS     r3,r3,#1
000050  d1eb              BNE      |L3.42|
;;;139    		  }
;;;140    
;;;141    			if(++VGA.Font_CurRow == FONT_Y)
000052  7aa0              LDRB     r0,[r4,#0xa]  ; VGA
000054  1c40              ADDS     r0,r0,#1
000056  b2c0              UXTB     r0,r0
000058  72a0              STRB     r0,[r4,#0xa]
00005a  280c              CMP      r0,#0xc
00005c  d103              BNE      |L3.102|
;;;142    			{ 
;;;143    				VGA.Font_CurRow = 0;
00005e  72a7              STRB     r7,[r4,#0xa]
;;;144    			  VGA.TextBuffer_Ptr+= VGA_TEXT_X;
000060  6860              LDR      r0,[r4,#4]  ; VGA
000062  3050              ADDS     r0,r0,#0x50
000064  6060              STR      r0,[r4,#4]  ; VGA
                  |L3.102|
;;;145    			}
;;;146    			
;;;147    			// pre-render next line
;;;148    			scanline = ScanLineBuf+1;
;;;149    	    font = (uint8_t *) &FONT_TABLE[VGA.Font_CurRow];			
000066  7aa2              LDRB     r2,[r4,#0xa]  ; VGA
000068  4969              LDR      r1,|L3.528|
00006a  486e              LDR      r0,|L3.548|
00006c  1852              ADDS     r2,r2,r1
;;;150          textbuf = VGA.TextBuffer_Ptr;			
;;;151    			
;;;152    	    for(i=0;i<VGA_PRE_RENDER/2;i++)
;;;153    		  {
;;;154    	      *scanline++ = font[(*textbuf++)*FONT_ROW];
00006e  6861              LDR      r1,[r4,#4]  ; VGA
000070  780b              LDRB     r3,[r1,#0]
000072  011b              LSLS     r3,r3,#4
000074  5cd3              LDRB     r3,[r2,r3]
000076  7043              STRB     r3,[r0,#1]
;;;155    			  *scanline++ = font[(*textbuf++)*FONT_ROW];
000078  784b              LDRB     r3,[r1,#1]
00007a  011b              LSLS     r3,r3,#4
00007c  5cd3              LDRB     r3,[r2,r3]
00007e  7083              STRB     r3,[r0,#2]
000080  788b              LDRB     r3,[r1,#2]            ;154
000082  011b              LSLS     r3,r3,#4              ;154
000084  5cd3              LDRB     r3,[r2,r3]            ;154
000086  70c3              STRB     r3,[r0,#3]            ;154
000088  78cb              LDRB     r3,[r1,#3]
00008a  011b              LSLS     r3,r3,#4
00008c  5cd3              LDRB     r3,[r2,r3]
00008e  7103              STRB     r3,[r0,#4]
000090  790b              LDRB     r3,[r1,#4]            ;154
000092  011b              LSLS     r3,r3,#4              ;154
000094  5cd3              LDRB     r3,[r2,r3]            ;154
000096  7143              STRB     r3,[r0,#5]            ;154
000098  794b              LDRB     r3,[r1,#5]
00009a  011b              LSLS     r3,r3,#4
00009c  5cd3              LDRB     r3,[r2,r3]
00009e  7183              STRB     r3,[r0,#6]
0000a0  798b              LDRB     r3,[r1,#6]            ;154
0000a2  011b              LSLS     r3,r3,#4              ;154
0000a4  5cd3              LDRB     r3,[r2,r3]            ;154
0000a6  71c3              STRB     r3,[r0,#7]            ;154
0000a8  79c9              LDRB     r1,[r1,#7]
0000aa  0109              LSLS     r1,r1,#4
0000ac  5c51              LDRB     r1,[r2,r1]
0000ae  7201              STRB     r1,[r0,#8]
                  |L3.176|
;;;156    		  }
;;;157    		}
;;;158    
;;;159    #ifdef VGA_BACKGROUND
;;;160    		if(VGA.Display)
0000b0  7ae0              LDRB     r0,[r4,#0xb]  ; VGA
0000b2  0780              LSLS     r0,r0,#30
0000b4  d505              BPL      |L3.194|
;;;161    		{  TIM3->CCR4 = VGA_DISPLAY_OFF;
0000b6  2131              MOVS     r1,#0x31
0000b8  485b              LDR      r0,|L3.552|
0000ba  0149              LSLS     r1,r1,#5
0000bc  6001              STR      r1,[r0,#0]
;;;162    		   TIM3->CCMR2 = TIM_CCMR2_OC4M_1;																	// OC4 Clear on match
0000be  1440              ASRS     r0,r0,#17
0000c0  83a8              STRH     r0,[r5,#0x1c]
                  |L3.194|
;;;163    		}
;;;164    #endif
;;;165    
;;;166    		TIM3->SR &= ~TIM_SR_CC2IF;
0000c2  8a28              LDRH     r0,[r5,#0x10]
0000c4  2104              MOVS     r1,#4
0000c6  4388              BICS     r0,r0,r1
0000c8  e09d              B        |L3.518|
                  |L3.202|
;;;167    	}
;;;168      else if(TIM3->SR & TIM_SR_UIF)
0000ca  8a2b              LDRH     r3,[r5,#0x10]
0000cc  07db              LSLS     r3,r3,#31
0000ce  d07d              BEQ      |L3.460|
;;;169    	{
;;;170    		switch(VGA.Line++)
0000d0  8926              LDRH     r6,[r4,#8]  ; VGA
0000d2  1c73              ADDS     r3,r6,#1
0000d4  8123              STRH     r3,[r4,#8]
0000d6  4b4f              LDR      r3,|L3.532|
0000d8  7adb              LDRB     r3,[r3,#0xb]          ;128
;;;171        {
;;;172    			case VGA_VSYNC_START:
;;;173    				if (VGA.DPMS_Mode < DPMSModeSuspend)
;;;174    					VSYNC_ASSERT();																	// Set VSync
;;;175    				else
;;;176    					VSYNC_PORT->BSRR = PIN_CLR(VSYNC_PIN);					
;;;177    				
;;;178    			  if ((VGA.DPMS_Mode==DPMSModeOn)||(VGA.DPMS_Mode==DPMSModeSuspend))
;;;179              TIM3->CCMR1 |= TIM_CCMR1_OC1M_1|TIM_CCMR1_OC1PE;		// OC1 PWM1, preload																					
;;;180    				else
;;;181    					TIM3->CCMR1 &= ~(TIM_CCMR1_OC1M_1|TIM_CCMR1_OC1PE); // Forced off
;;;182    				break;
;;;183    			
;;;184    			case VGA_VSYNC_STOP:
;;;185    				if (VGA.DPMS_Mode<DPMSModeSuspend)
;;;186    					VSYNC_DEASSERT();																// Reset VSync
;;;187    				
;;;188    			  VGA.Render = 0;
0000da  085b              LSRS     r3,r3,#1
0000dc  005b              LSLS     r3,r3,#1
0000de  2e25              CMP      r6,#0x25              ;170
0000e0  d059              BEQ      |L3.406|
0000e2  dc0b              BGT      |L3.252|
0000e4  4f4b              LDR      r7,|L3.532|
0000e6  7aff              LDRB     r7,[r7,#0xb]          ;128
0000e8  073f              LSLS     r7,r7,#28             ;173
0000ea  46bc              MOV      r12,r7                ;173
0000ec  0fbf              LSRS     r7,r7,#30             ;173
0000ee  2e02              CMP      r6,#2                 ;170
0000f0  d00d              BEQ      |L3.270|
0000f2  2e04              CMP      r6,#4                 ;170
0000f4  d01e              BEQ      |L3.308|
0000f6  2e24              CMP      r6,#0x24              ;170
0000f8  d15c              BNE      |L3.436|
0000fa  e027              B        |L3.332|
                  |L3.252|
0000fc  3eff              SUBS     r6,r6,#0xff           ;170
0000fe  3eff              SUBS     r6,r6,#0xff           ;170
000100  1fb6              SUBS     r6,r6,#6              ;170
000102  d04b              BEQ      |L3.412|
000104  2e01              CMP      r6,#1                 ;170
000106  d04b              BEQ      |L3.416|
000108  2e09              CMP      r6,#9                 ;170
00010a  d153              BNE      |L3.436|
00010c  e04c              B        |L3.424|
                  |L3.270|
00010e  2001              MOVS     r0,#1                 ;174
000110  0540              LSLS     r0,r0,#21             ;174
000112  2109              MOVS     r1,#9                 ;176
000114  06c9              LSLS     r1,r1,#27             ;176
000116  6188              STR      r0,[r1,#0x18]         ;176
000118  4660              MOV      r0,r12                ;176
00011a  0f81              LSRS     r1,r0,#30             ;178
00011c  2028              MOVS     r0,#0x28              ;179
00011e  2900              CMP      r1,#0                 ;178
000120  d005              BEQ      |L3.302|
000122  2f02              CMP      r7,#2                 ;178
000124  d003              BEQ      |L3.302|
000126  8b29              LDRH     r1,[r5,#0x18]         ;181
000128  4381              BICS     r1,r1,r0              ;181
                  |L3.298|
00012a  8329              STRH     r1,[r5,#0x18]         ;179
00012c  e042              B        |L3.436|
                  |L3.302|
00012e  8b29              LDRH     r1,[r5,#0x18]         ;179
000130  4301              ORRS     r1,r1,r0              ;179
000132  e7fa              B        |L3.298|
                  |L3.308|
000134  2f02              CMP      r7,#2                 ;185
000136  d203              BCS      |L3.320|
000138  2120              MOVS     r1,#0x20              ;186
00013a  2009              MOVS     r0,#9                 ;186
00013c  06c0              LSLS     r0,r0,#27             ;186
00013e  6181              STR      r1,[r0,#0x18]         ;186
                  |L3.320|
;;;189    				VGA.Display = 0;
000140  20fd              MOVS     r0,#0xfd
000142  4003              ANDS     r3,r3,r0
000144  72e3              STRB     r3,[r4,#0xb]
;;;190      			VGA.TextBuffer_Ptr = TextBuffer;
000146  4839              LDR      r0,|L3.556|
;;;191    				break;
000148  6060              STR      r0,[r4,#4]  ; VGA
00014a  e033              B        |L3.436|
                  |L3.332|
;;;192    
;;;193    			case VGA_DISPLAY_START-1:		
;;;194    				VGA.Render = 1;
00014c  2301              MOVS     r3,#1
00014e  431a              ORRS     r2,r2,r3
000150  72e2              STRB     r2,[r4,#0xb]
;;;195    			
;;;196    				// pre-render next line
;;;197    				scanline = ScanLineBuf+1;
;;;198    				font = (uint8_t *) &FONT_TABLE[VGA.Font_CurRow];			
;;;199    				textbuf = VGA.TextBuffer_Ptr;			
;;;200    				
;;;201    				for(i=0;i<VGA_PRE_RENDER/2;i++)
;;;202    				{
;;;203    					*scanline++ = font[(*textbuf++)*FONT_ROW];
000152  7803              LDRB     r3,[r0,#0]
000154  4a33              LDR      r2,|L3.548|
000156  011b              LSLS     r3,r3,#4
000158  5ccb              LDRB     r3,[r1,r3]
00015a  7053              STRB     r3,[r2,#1]
;;;204    					*scanline++ = font[(*textbuf++)*FONT_ROW];
00015c  7843              LDRB     r3,[r0,#1]
00015e  011b              LSLS     r3,r3,#4
000160  5ccb              LDRB     r3,[r1,r3]
000162  7093              STRB     r3,[r2,#2]
000164  7883              LDRB     r3,[r0,#2]            ;203
000166  011b              LSLS     r3,r3,#4              ;203
000168  5ccb              LDRB     r3,[r1,r3]            ;203
00016a  70d3              STRB     r3,[r2,#3]            ;203
00016c  78c3              LDRB     r3,[r0,#3]
00016e  011b              LSLS     r3,r3,#4
000170  5ccb              LDRB     r3,[r1,r3]
000172  7113              STRB     r3,[r2,#4]
000174  7903              LDRB     r3,[r0,#4]            ;203
000176  011b              LSLS     r3,r3,#4              ;203
000178  5ccb              LDRB     r3,[r1,r3]            ;203
00017a  7153              STRB     r3,[r2,#5]            ;203
00017c  7943              LDRB     r3,[r0,#5]
00017e  011b              LSLS     r3,r3,#4
000180  5ccb              LDRB     r3,[r1,r3]
000182  7193              STRB     r3,[r2,#6]
000184  7983              LDRB     r3,[r0,#6]            ;203
000186  011b              LSLS     r3,r3,#4              ;203
000188  5ccb              LDRB     r3,[r1,r3]            ;203
00018a  71d3              STRB     r3,[r2,#7]            ;203
00018c  79c0              LDRB     r0,[r0,#7]
00018e  0100              LSLS     r0,r0,#4
000190  5c08              LDRB     r0,[r1,r0]
000192  7210              STRB     r0,[r2,#8]
;;;205    				}					
;;;206    				break;			
000194  e00e              B        |L3.436|
                  |L3.406|
;;;207    
;;;208    			case VGA_DISPLAY_START:
;;;209    				VGA.Display = 1;
000196  2002              MOVS     r0,#2
000198  4302              ORRS     r2,r2,r0
;;;210    				break;						
00019a  e003              B        |L3.420|
                  |L3.412|
;;;211    			
;;;212    			case VGA_DISPLAY_STOP-1:
;;;213    			  VGA.Render = 0;	
00019c  72e3              STRB     r3,[r4,#0xb]
;;;214    			  break;
00019e  e009              B        |L3.436|
                  |L3.416|
;;;215    			
;;;216    			case VGA_DISPLAY_STOP:
;;;217    				VGA.Display = 0;	
0001a0  20fd              MOVS     r0,#0xfd
0001a2  4002              ANDS     r2,r2,r0
                  |L3.420|
0001a4  72e2              STRB     r2,[r4,#0xb]          ;209
0001a6  e005              B        |L3.436|
                  |L3.424|
;;;218    			  break;
;;;219    			
;;;220    			case VGA_LINES:																			// Reach bottom of display
;;;221    				VGA.Line = 0;
0001a8  8127              STRH     r7,[r4,#8]
;;;222    			  VGA.Font_CurRow = 0;
0001aa  72a7              STRB     r7,[r4,#0xa]
;;;223    
;;;224    			  if (VGA.VerticalBlank)														// Callback code
0001ac  6820              LDR      r0,[r4,#0]  ; VGA
0001ae  2800              CMP      r0,#0
0001b0  d000              BEQ      |L3.436|
;;;225    			    (* VGA.VerticalBlank)();
0001b2  4780              BLX      r0
                  |L3.436|
;;;226    				break;
;;;227    		}
;;;228    	
;;;229    		if(VGA.Display)
0001b4  7ae0              LDRB     r0,[r4,#0xb]  ; VGA
0001b6  0780              LSLS     r0,r0,#30
0001b8  d516              BPL      |L3.488|
;;;230    		{
;;;231    			DMA1_Channel3->CCR &= ~DMA_CCR_EN;
0001ba  4818              LDR      r0,|L3.540|
0001bc  6b01              LDR      r1,[r0,#0x30]
0001be  0849              LSRS     r1,r1,#1
0001c0  0049              LSLS     r1,r1,#1
0001c2  6301              STR      r1,[r0,#0x30]
;;;232    			DMA1_Channel3->CNDTR = SPI_DMA_WORDS;							// # of transfers					
0001c4  2152              MOVS     r1,#0x52
0001c6  6341              STR      r1,[r0,#0x34]
;;;233    			DMA1_Channel3->CMAR = (uint32_t)ScanLineBuf;
0001c8  4916              LDR      r1,|L3.548|
0001ca  e000              B        |L3.462|
                  |L3.460|
0001cc  e01c              B        |L3.520|
                  |L3.462|
0001ce  63c1              STR      r1,[r0,#0x3c]
;;;234    							
;;;235    #ifdef VGA_BACKGROUND
;;;236    			TIM3->CCR4 = VGA_DISPLAY_ON;
0001d0  21ff              MOVS     r1,#0xff
0001d2  4815              LDR      r0,|L3.552|
0001d4  3121              ADDS     r1,r1,#0x21
0001d6  6001              STR      r1,[r0,#0]
;;;237    			TIM3->CCMR2 = TIM_CCMR2_OC4M_0;										// OC4 active on match
0001d8  1480              ASRS     r0,r0,#18
0001da  83a8              STRH     r0,[r5,#0x1c]
;;;238    #endif	
;;;239    			// Set PendAV
;;;240    			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
0001dc  4814              LDR      r0,|L3.560|
0001de  6841              LDR      r1,[r0,#4]
0001e0  2201              MOVS     r2,#1
0001e2  0712              LSLS     r2,r2,#28
0001e4  4311              ORRS     r1,r1,r2
0001e6  6041              STR      r1,[r0,#4]
                  |L3.488|
;;;241    		}
;;;242    
;;;243    		if (MicroTimer0) 
0001e8  4812              LDR      r0,|L3.564|
0001ea  7801              LDRB     r1,[r0,#0]  ; MicroTimer0
0001ec  2900              CMP      r1,#0
0001ee  d002              BEQ      |L3.502|
;;;244    			MicroTimer0--;
0001f0  7801              LDRB     r1,[r0,#0]  ; MicroTimer0
0001f2  1e49              SUBS     r1,r1,#1
0001f4  7001              STRB     r1,[r0,#0]
                  |L3.502|
;;;245    		
;;;246    		if (MicroTimer1) 
0001f6  7841              LDRB     r1,[r0,#1]  ; MicroTimer1
0001f8  2900              CMP      r1,#0
0001fa  d002              BEQ      |L3.514|
;;;247    			MicroTimer1--;
0001fc  7841              LDRB     r1,[r0,#1]  ; MicroTimer1
0001fe  1e49              SUBS     r1,r1,#1
000200  7041              STRB     r1,[r0,#1]
                  |L3.514|
;;;248    		
;;;249    		TIM3->SR = ~TIM_SR_UIF;																// clear interrupt flag
000202  2001              MOVS     r0,#1
000204  43c0              MVNS     r0,r0
                  |L3.518|
000206  8228              STRH     r0,[r5,#0x10]         ;166
                  |L3.520|
;;;250    	}
;;;251    }
000208  bdf8              POP      {r3-r7,pc}
;;;252    
                          ENDP

00020a  0000              DCW      0x0000
                  |L3.524|
                          DCD      0x40000400
                  |L3.528|
                          DCD      FONT_TABLE
                  |L3.532|
                          DCD      ||.bss||
                  |L3.536|
                          DCD      0x00003091
                  |L3.540|
                          DCD      0x40020000
                  |L3.544|
                          DCD      ||.bss||+0xc93
                  |L3.548|
                          DCD      ||.bss||+0xc8c
                  |L3.552|
                          DCD      0x40000440
                  |L3.556|
                          DCD      ||.bss||+0xc
                  |L3.560|
                          DCD      0xe000ed00
                  |L3.564|
                          DCD      ||.data||

                          AREA ||i.VGA_Init||, CODE, READONLY, ALIGN=2

                  VGA_Init PROC
;;;31     
;;;32     void VGA_Init(void)
000000  483a              LDR      r0,|L4.236|
;;;33     {
;;;34     	// GPIO default: input
;;;35     	// PA13, PA14 = SWD
;;;36     	
;;;37     	// Enable GPIO and DMA clock
;;;38     	RCC->AHBENR |= RCC_AHBENR_GPIOAEN|RCC_AHBENR_GPIOBEN|RCC_AHBENR_GPIOFEN|RCC_AHBENR_DMAEN;
000002  6940              LDR      r0,[r0,#0x14]
000004  493a              LDR      r1,|L4.240|
000006  4308              ORRS     r0,r0,r1
000008  4938              LDR      r1,|L4.236|
00000a  6148              STR      r0,[r1,#0x14]
;;;39     	// Enable SPI, UART1 clock
;;;40       RCC->APB2ENR |= RCC_APB2ENR_SPI1EN|RCC_APB2ENR_USART1EN|					// Enable SPI, UART, SYSCFG
00000c  6988              LDR      r0,[r1,#0x18]
00000e  4939              LDR      r1,|L4.244|
000010  4308              ORRS     r0,r0,r1
000012  4936              LDR      r1,|L4.236|
000014  6188              STR      r0,[r1,#0x18]
;;;41     	                RCC_APB2ENR_SYSCFGCOMPEN;
;;;42     	// Enable TIM3
;;;43     	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
000016  69c8              LDR      r0,[r1,#0x1c]
000018  2102              MOVS     r1,#2
00001a  4308              ORRS     r0,r0,r1
00001c  4933              LDR      r1,|L4.236|
00001e  61c8              STR      r0,[r1,#0x1c]
;;;44     	
;;;45       // Select pin types
;;;46     	GPIOA->MODER = GPIOA_MODER|PIN_ALT(PA7)|PIN_ALT(PA6)|PIN_OUTPUT(PA5); // MOSI, VSync, HSync
000020  2109              MOVS     r1,#9
000022  4835              LDR      r0,|L4.248|
000024  06c9              LSLS     r1,r1,#27
000026  6008              STR      r0,[r1,#0]
;;;47     	GPIOA->AFR[0] = PIN_AFRL(PA7,0)|PIN_AFRL(PA6,1);									// MOSI,TIM3 CH1
000028  2001              MOVS     r0,#1
00002a  0600              LSLS     r0,r0,#24
00002c  6208              STR      r0,[r1,#0x20]
;;;48     
;;;49     	GPIOA->PUPDR = GPIOA_PUPDR;
00002e  1100              ASRS     r0,r0,#4
000030  60c8              STR      r0,[r1,#0xc]
;;;50     	GPIOA->OTYPER = GPIOA_OTYPER;
000032  2003              MOVS     r0,#3
000034  8088              STRH     r0,[r1,#4]
;;;51     	GPIOA->BSRR = GPIOA_BSRR;	
000036  6188              STR      r0,[r1,#0x18]
;;;52     	GPIOA->AFR[1] = GPIOA_AFR1;
000038  20ff              MOVS     r0,#0xff
00003a  3011              ADDS     r0,r0,#0x11
00003c  6248              STR      r0,[r1,#0x24]
;;;53     	
;;;54     	// SPI: (SCK, MOSI) slew rate = 00 (2MHz), 01 (10MHz), 11 (50MHz)
;;;55       // Don't seems to have an effect on the video quality.  Use default for EMI control
;;;56     	
;;;57      GPIOA->OSPEEDR = PIN_OSPEED(PA7,GPIO_OSPEEDR_OSPEEDR0_1);
00003e  2001              MOVS     r0,#1
000040  03c0              LSLS     r0,r0,#15
000042  6088              STR      r0,[r1,#8]
;;;58     
;;;59     #ifdef VGA_BACKGROUND
;;;60       GPIOB->MODER  = PIN_ALT(PB1);																			// TIM3 CH4 (Display enable)
000044  492d              LDR      r1,|L4.252|
000046  2008              MOVS     r0,#8
000048  6008              STR      r0,[r1,#0]
;;;61     	GPIOB->AFR[0] = PIN_AFRL(PB1,1);																	// TIM3 CH4
00004a  2010              MOVS     r0,#0x10
00004c  6208              STR      r0,[r1,#0x20]
;;;62     #else	
;;;63     	GPIOB->MODER  = PIN_OUTPUT(PB1);
;;;64     #endif	
;;;65     	
;;;66       GPIOF->MODER  = PIN_OUTPUT(PF1)|PIN_INPUT(PF0);
00004e  492c              LDR      r1,|L4.256|
000050  2004              MOVS     r0,#4
000052  6008              STR      r0,[r1,#0]
;;;67     
;;;68     	GPIOB->OSPEEDR = PIN_OSPEED(PB1,GPIO_OSPEEDR_OSPEEDR0_1);
000054  4929              LDR      r1,|L4.252|
000056  2008              MOVS     r0,#8
000058  6088              STR      r0,[r1,#8]
;;;69     /*
;;;70              0                                  VGA_PIX_X
;;;71      				       _______________________________
;;;72       HSync   ____/                               \			  TIM3 C1: VGA_HSYNC
;;;73     																															 
;;;74     	SPI DMA   |																					TIM3 C2: tweak for IRQ latency for TIM1 C3	
;;;75               ______ _______________________________
;;;76     	Display ______X_______________________________ 			TIM3 C4: VGA_HSYNC+VGA_HSYNC_BP+VGA_BORDER_LEFT
;;;77     
;;;78     */
;;;79     	VGA.Line = 0;
00005a  492a              LDR      r1,|L4.260|
00005c  2000              MOVS     r0,#0
00005e  8108              STRH     r0,[r1,#8]
;;;80     	
;;;81     	// TIM3 CH1: HSync
;;;82       TIM3->CCR1 =  VGA_HSYNC_CNT;																					// set rising edge
000060  4929              LDR      r1,|L4.264|
000062  20c0              MOVS     r0,#0xc0
000064  6348              STR      r0,[r1,#0x34]
;;;83       TIM3->CCMR1 = TIM_CCMR1_OC1M_2|TIM_CCMR1_OC1M_1|TIM_CCMR1_OC1PE;			// OC1 PWM1, preload																					
000066  2068              MOVS     r0,#0x68
000068  8308              STRH     r0,[r1,#0x18]
;;;84     								
;;;85     	// TIM3 CH2 -> IRQ -> SPI DMA 3
;;;86       TIM3->CCR2 = VGA_DMA_START;
00006a  20d2              MOVS     r0,#0xd2
00006c  6388              STR      r0,[r1,#0x38]
;;;87     	
;;;88     #ifdef VGA_BACKGROUND
;;;89     	// TIM3 CH4 -> Display Enable (tweaking only)
;;;90       TIM3->CCER = TIM_CCER_CC1E|TIM_CCER_CC1P|TIM_CCER_CC4E; 							// OC1, OC2, OC4 enabled
00006e  4928              LDR      r1,|L4.272|
000070  4826              LDR      r0,|L4.268|
000072  8008              STRH     r0,[r1,#0]
;;;91     #else
;;;92       TIM3->CCER = TIM_CCER_CC1E|TIM_CCER_CC1P; 														// OC1, OC2 enabled
;;;93     #endif
;;;94     
;;;95     	// TIM1 Init
;;;96     	TIM3->PSC = TIM3_PRESCALER;																						// prescaler = pclk/2
000074  2000              MOVS     r0,#0
000076  8108              STRH     r0,[r1,#8]
;;;97       TIM3->ARR = VGA_DOTS_CNT;																							// timer reload = # of pixels per line
000078  2019              MOVS     r0,#0x19
00007a  4923              LDR      r1,|L4.264|
00007c  0180              LSLS     r0,r0,#6
00007e  62c8              STR      r0,[r1,#0x2c]
;;;98     	TIM3->DIER |= TIM_DIER_UIE|TIM_DIER_CC2IE;														// TIM1 update interrupt, CC3 DMA, CC4 IRQ
000080  8989              LDRH     r1,[r1,#0xc]
000082  2005              MOVS     r0,#5
000084  4a20              LDR      r2,|L4.264|
000086  4301              ORRS     r1,r1,r0
000088  8191              STRH     r1,[r2,#0xc]
;;;99     	TIM3->EGR |= TIM_EGR_UG;	
00008a  8a91              LDRH     r1,[r2,#0x14]
00008c  2201              MOVS     r2,#1
00008e  4311              ORRS     r1,r1,r2
000090  4a1d              LDR      r2,|L4.264|
000092  8291              STRH     r1,[r2,#0x14]
;;;100    	TIM3->BDTR |= TIM_BDTR_MOE;																						// Main output enable
000094  491f              LDR      r1,|L4.276|
000096  8889              LDRH     r1,[r1,#4]
000098  13d2              ASRS     r2,r2,#15
00009a  4311              ORRS     r1,r1,r2
00009c  4a1d              LDR      r2,|L4.276|
00009e  8091              STRH     r1,[r2,#4]
;;;101      TIM3->CR1 |= TIM_CR1_CEN|TIM_CR1_URS;						 			 								// enable TIM, under/over flow updates only
0000a0  4919              LDR      r1,|L4.264|
0000a2  8809              LDRH     r1,[r1,#0]
0000a4  4301              ORRS     r1,r1,r0
0000a6  4818              LDR      r0,|L4.264|
0000a8  8001              STRH     r1,[r0,#0]
;;;102    									 	
;;;103      // SPI init
;;;104    	SPI1->CR1 = SPI_CR1_MSTR|SPI_CR1_SSM|SPI_CR1_SSI|SPI_CR1_EXTRA; 			// Master, BR: Fpclk/2
0000aa  21c1              MOVS     r1,#0xc1
0000ac  481a              LDR      r0,|L4.280|
0000ae  0089              LSLS     r1,r1,#2
0000b0  8001              STRH     r1,[r0,#0]
;;;105    	SPI1->CR2 = SPI_CR2_DATASIZE|SPI_CR2_TXDMAEN|SPI_CR2_EXTRA;						// TI Mode, set Data Size, SPI TX DMA enable 
0000b2  491a              LDR      r1,|L4.284|
0000b4  8081              STRH     r1,[r0,#4]
;;;106    																																				// TI mode: MOSI idle at 0.
;;;107    	SPI1->CR1 |= SPI_CR1_SPE;
0000b6  8801              LDRH     r1,[r0,#0]
0000b8  2240              MOVS     r2,#0x40
0000ba  4311              ORRS     r1,r1,r2
0000bc  8001              STRH     r1,[r0,#0]
;;;108    
;;;109      // DMA Ch3 - SPI
;;;110    	DMA1_Channel3->CPAR = (uint32_t) &SPI1->DR;
0000be  4919              LDR      r1,|L4.292|
0000c0  4817              LDR      r0,|L4.288|
0000c2  6388              STR      r0,[r1,#0x38]
0000c4  4818              LDR      r0,|L4.296|
0000c6  6801              LDR      r1,[r0,#0]
0000c8  0a09              LSRS     r1,r1,#8
0000ca  0209              LSLS     r1,r1,#8
0000cc  6001              STR      r1,[r0,#0]
0000ce  4917              LDR      r1,|L4.300|
0000d0  0290              LSLS     r0,r2,#10
0000d2  6008              STR      r0,[r1,#0]
0000d4  4a16              LDR      r2,|L4.304|
0000d6  69d0              LDR      r0,[r2,#0x1c]
0000d8  23ff              MOVS     r3,#0xff
0000da  041b              LSLS     r3,r3,#16
0000dc  4398              BICS     r0,r0,r3
0000de  2301              MOVS     r3,#1
0000e0  059b              LSLS     r3,r3,#22
0000e2  4318              ORRS     r0,r0,r3
0000e4  61d0              STR      r0,[r2,#0x1c]
0000e6  0588              LSLS     r0,r1,#22
0000e8  6008              STR      r0,[r1,#0]
;;;111    
;;;112      // NVIC IRQ
;;;113      NVIC_SetPriority(TIM3_IRQn,TIM3_IRQ_PRIORITY);												// Highest priority
;;;114      NVIC_EnableIRQ(TIM3_IRQn);
;;;115    	
;;;116    	NVIC_SetPriority(PendSV_IRQn,PENDSV_PRIORITY);
;;;117    	NVIC_EnableIRQ(PendSV_IRQn);
;;;118    }
0000ea  4770              BX       lr
;;;119    
                          ENDP

                  |L4.236|
                          DCD      0x40021000
                  |L4.240|
                          DCD      0x00460001
                  |L4.244|
                          DCD      0x00005001
                  |L4.248|
                          DCD      0x2828a555
                  |L4.252|
                          DCD      0x48000400
                  |L4.256|
                          DCD      0x48001400
                  |L4.260|
                          DCD      ||.bss||
                  |L4.264|
                          DCD      0x40000400
                  |L4.268|
                          DCD      0x00001003
                  |L4.272|
                          DCD      0x40000420
                  |L4.276|
                          DCD      0x40000440
                  |L4.280|
                          DCD      0x40013000
                  |L4.284|
                          DCD      0x00000712
                  |L4.288|
                          DCD      0x4001300c
                  |L4.292|
                          DCD      0x40020000
                  |L4.296|
                          DCD      0xe000e410
                  |L4.300|
                          DCD      0xe000e100
                  |L4.304|
                          DCD      0xe000ed04

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  VGA
                          %        12
                  TextBuffer
                          %        3200
                  ScanLineBuf
                          %        82

                          AREA ||.data||, DATA, ALIGN=0

                  MicroTimer0
000000  00                DCB      0x00
                  MicroTimer1
000001  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "vga-min.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_vga_min_c_VGA_Init____REV16|
#line 129 "C:\\CAD\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_vga_min_c_VGA_Init____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_vga_min_c_VGA_Init____REVSH|
#line 144
|__asm___9_vga_min_c_VGA_Init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
