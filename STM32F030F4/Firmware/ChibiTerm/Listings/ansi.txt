; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\ansi.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ansi.d --cpu=Cortex-M0 --apcs=interwork -O3 -Otime --diag_suppress=9931 -IC:\CAD\Keil_v5\ARM\RV31\INC -IC:\CAD\Keil_v5\ARM\CMSIS\Include -IC:\CAD\Keil_v5\ARM\Inc\ST\STM32F0xx -D__UVISION_VERSION=514 -DSTM32F030 --omf_browse=.\objects\ansi.crf ansi.c]
                          THUMB

                          AREA ||i.ANSI_FSM||, CODE, READONLY, ALIGN=2

                  ANSI_FSM PROC
;;;171    
;;;172    void ANSI_FSM(uint8_t Ch)
000000  b570              PUSH     {r4-r6,lr}
;;;173    {
;;;174    	if(Ch==Char_ESC)
;;;175    		CSI.State = ANSI_ESC;
000002  4c2a              LDR      r4,|L1.172|
000004  4605              MOV      r5,r0                 ;173
000006  7826              LDRB     r6,[r4,#0]
000008  08f0              LSRS     r0,r6,#3
00000a  00c0              LSLS     r0,r0,#3
00000c  2d1b              CMP      r5,#0x1b              ;174
00000e  d005              BEQ      |L1.28|
;;;176    	else if (Ch< FONT_START)
000010  2d20              CMP      r5,#0x20
000012  d205              BCS      |L1.32|
;;;177    		ControlCode(Ch);
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       ControlCode
                  |L1.26|
;;;178    	else
;;;179    	{
;;;180    		switch(CSI.State)
;;;181    		{
;;;182    			case ANSI_ASCII:
;;;183    				VGA_Putch(Ch);			 
;;;184    				break;
;;;185    				
;;;186    			case ANSI_ESC:												// Escape sequence
;;;187    				if(Ch == Char_CSI_Start)
;;;188    				{ 
;;;189    					Clear_CSI();				
;;;190    					CSI.State = ANSI_CSI;;
;;;191    				}
;;;192    				else
;;;193    				{
;;;194    					ESC_Sequence();
;;;195    					CSI.State = ANSI_ASCII;
;;;196    				}
;;;197    		    break;
;;;198    				
;;;199    			case ANSI_CSI:
;;;200    				if(isdigit(Ch))
;;;201    				{ 
;;;202    					if(CSI.Parm_Idx < CSI_PARM_MAX)
;;;203    					  CSI.Parm[CSI.Parm_Idx] = CSI.Parm[CSI.Parm_Idx]*10 + (Ch-'0');
;;;204    				}
;;;205    				else if(Ch == Char_CSI_Delimiter)
;;;206    				{ 
;;;207    					if(CSI.Parm_Idx < CSI_PARM_MAX)
;;;208    					  CSI.Parm_Idx++;
;;;209    				}
;;;210    				else
;;;211    				{
;;;212    					CSI.End = Ch;
;;;213    					CSI_Sequence();
;;;214    					CSI.State = ANSI_ASCII;
;;;215    				}
;;;216    				break;
;;;217    		}
;;;218    	}
;;;219     }
00001a  bd70              POP      {r4-r6,pc}
                  |L1.28|
00001c  1c40              ADDS     r0,r0,#1
00001e  e017              B        |L1.80|
                  |L1.32|
000020  0771              LSLS     r1,r6,#29             ;180
000022  0f49              LSRS     r1,r1,#29             ;180
000024  d016              BEQ      |L1.84|
000026  2901              CMP      r1,#1                 ;180
000028  d022              BEQ      |L1.112|
00002a  2902              CMP      r1,#2                 ;180
00002c  d1f5              BNE      |L1.26|
00002e  f7fffffe          BL       __rt_ctype_table
000032  6800              LDR      r0,[r0,#0]            ;200
000034  5d41              LDRB     r1,[r0,r5]            ;200
000036  481d              LDR      r0,|L1.172|
000038  7800              LDRB     r0,[r0,#0]            ;175
00003a  08c0              LSRS     r0,r0,#3              ;202
00003c  2920              CMP      r1,#0x20              ;200
00003e  d022              BEQ      |L1.134|
000040  2d3b              CMP      r5,#0x3b              ;205
000042  d02a              BEQ      |L1.154|
000044  7065              STRB     r5,[r4,#1]            ;212
000046  f7fffffe          BL       CSI_Sequence
00004a  7820              LDRB     r0,[r4,#0]            ;214  ; CSI
00004c  08c0              LSRS     r0,r0,#3              ;214
00004e  00c0              LSLS     r0,r0,#3              ;214
                  |L1.80|
000050  7020              STRB     r0,[r4,#0]            ;175
000052  bd70              POP      {r4-r6,pc}
                  |L1.84|
000054  3d20              SUBS     r5,r5,#0x20
000056  2d5f              CMP      r5,#0x5f
000058  d900              BLS      |L1.92|
00005a  2500              MOVS     r5,#0
                  |L1.92|
00005c  4814              LDR      r0,|L1.176|
00005e  7005              STRB     r5,[r0,#0]
000060  2102              MOVS     r1,#2
000062  5641              LDRSB    r1,[r0,r1]  ; Cursor
000064  7840              LDRB     r0,[r0,#1]  ; Cursor
000066  1c40              ADDS     r0,r0,#1
000068  b240              SXTB     r0,r0
00006a  f7fffffe          BL       Cursor_MoveTo
00006e  bd70              POP      {r4-r6,pc}
                  |L1.112|
000070  2d5b              CMP      r5,#0x5b              ;187
000072  d1ed              BNE      |L1.80|
000074  2110              MOVS     r1,#0x10              ;187
000076  1ca0              ADDS     r0,r4,#2              ;187
000078  f7fffffe          BL       __aeabi_memclr
00007c  2000              MOVS     r0,#0                 ;187
00007e  7060              STRB     r0,[r4,#1]            ;187
000080  1c80              ADDS     r0,r0,#2              ;187
000082  7020              STRB     r0,[r4,#0]            ;190
                  |L1.132|
000084  bd70              POP      {r4-r6,pc}
                  |L1.134|
000086  2810              CMP      r0,#0x10              ;202
000088  d2fc              BCS      |L1.132|
00008a  1900              ADDS     r0,r0,r4              ;203
00008c  7881              LDRB     r1,[r0,#2]            ;203
00008e  220a              MOVS     r2,#0xa               ;203
000090  4351              MULS     r1,r2,r1              ;203
000092  1949              ADDS     r1,r1,r5              ;203
000094  3930              SUBS     r1,r1,#0x30           ;203
000096  7081              STRB     r1,[r0,#2]            ;203
                  |L1.152|
000098  bd70              POP      {r4-r6,pc}
                  |L1.154|
00009a  2810              CMP      r0,#0x10              ;207
00009c  d2fc              BCS      |L1.152|
00009e  0771              LSLS     r1,r6,#29             ;208
0000a0  0f49              LSRS     r1,r1,#29             ;208
0000a2  1c40              ADDS     r0,r0,#1              ;208
0000a4  00c0              LSLS     r0,r0,#3              ;208
0000a6  4301              ORRS     r1,r1,r0              ;208
0000a8  7021              STRB     r1,[r4,#0]            ;208
0000aa  bd70              POP      {r4-r6,pc}
;;;220    
                          ENDP

                  |L1.172|
                          DCD      ||.bss||
                  |L1.176|
                          DCD      ||.data||+0x1

                          AREA ||i.ANSI_Init||, CODE, READONLY, ALIGN=2

                  ANSI_Init PROC
;;;53     
;;;54     void ANSI_Init(void)
000000  4913              LDR      r1,|L2.80|
;;;55     {	
;;;56     	VGA.VerticalBlank = VerticalBlank_CB;
000002  4812              LDR      r0,|L2.76|
;;;57     	ANSI_Prefs.LineWrap = ANSI_Prefs.Scroll = 
000004  6008              STR      r0,[r1,#0]  ; VGA
000006  4913              LDR      r1,|L2.84|
000008  2208              MOVS     r2,#8
00000a  7808              LDRB     r0,[r1,#0]  ; ANSI_Prefs
00000c  23fb              MOVS     r3,#0xfb
00000e  4310              ORRS     r0,r0,r2
000010  0702              LSLS     r2,r0,#28
000012  0fd2              LSRS     r2,r2,#31
000014  4018              ANDS     r0,r0,r3
000016  0092              LSLS     r2,r2,#2
000018  4310              ORRS     r0,r0,r2
00001a  0742              LSLS     r2,r0,#29
00001c  0fd2              LSRS     r2,r2,#31
00001e  23fd              MOVS     r3,#0xfd
000020  0052              LSLS     r2,r2,#1
000022  4018              ANDS     r0,r0,r3
000024  4310              ORRS     r0,r0,r2
000026  0782              LSLS     r2,r0,#30
000028  0fd2              LSRS     r2,r2,#31
00002a  0840              LSRS     r0,r0,#1
00002c  0040              LSLS     r0,r0,#1
00002e  4310              ORRS     r0,r0,r2
000030  7008              STRB     r0,[r1,#0]
;;;58     	ANSI_Prefs.AutoCR = ANSI_Prefs.AutoLF = 1;
;;;59     	Cursor.Type = Cursor_Underline;
000032  4809              LDR      r0,|L2.88|
000034  78c1              LDRB     r1,[r0,#3]  ; Cursor
000036  0689              LSLS     r1,r1,#26
000038  0e89              LSRS     r1,r1,#26
00003a  3140              ADDS     r1,r1,#0x40
00003c  70c1              STRB     r1,[r0,#3]
;;;60     	CSI.State = ANSI_ASCII;
00003e  4807              LDR      r0,|L2.92|
000040  7801              LDRB     r1,[r0,#0]  ; CSI
000042  08c9              LSRS     r1,r1,#3
000044  00c9              LSLS     r1,r1,#3
000046  7001              STRB     r1,[r0,#0]
;;;61     }
000048  4770              BX       lr
;;;62     
                          ENDP

00004a  0000              DCW      0x0000
                  |L2.76|
                          DCD      VerticalBlank_CB
                  |L2.80|
                          DCD      VGA
                  |L2.84|
                          DCD      ||.data||
                  |L2.88|
                          DCD      ||.data||+0x1
                  |L2.92|
                          DCD      ||.bss||

                          AREA ||i.CSI_Sequence||, CODE, READONLY, ALIGN=2

                  CSI_Sequence PROC
;;;224      
;;;225    void CSI_Sequence(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;226    {
;;;227    	PutCSI(CSI.End);
000002  4c1a              LDR      r4,|L3.108|
000004  4d1a              LDR      r5,|L3.112|
000006  7866              LDRB     r6,[r4,#1]  ; CSI
                  |L3.8|
000008  7828              LDRB     r0,[r5,#0]
00000a  1c6d              ADDS     r5,r5,#1
00000c  f7fffffe          BL       Putchar
000010  7828              LDRB     r0,[r5,#0]
000012  2800              CMP      r0,#0
000014  d1f8              BNE      |L3.8|
000016  2500              MOVS     r5,#0
                  |L3.24|
000018  1960              ADDS     r0,r4,r5
00001a  7880              LDRB     r0,[r0,#2]
00001c  2800              CMP      r0,#0
00001e  d013              BEQ      |L3.72|
000020  2864              CMP      r0,#0x64
000022  d905              BLS      |L3.48|
000024  2164              MOVS     r1,#0x64
000026  f7fffffe          BL       __aeabi_uidivmod
00002a  3030              ADDS     r0,r0,#0x30
00002c  b2c0              UXTB     r0,r0
00002e  e009              B        |L3.68|
                  |L3.48|
000030  210a              MOVS     r1,#0xa
000032  f7fffffe          BL       __aeabi_uidivmod
000036  3030              ADDS     r0,r0,#0x30
000038  460f              MOV      r7,r1
00003a  b2c0              UXTB     r0,r0
00003c  f7fffffe          BL       Putchar
000040  4638              MOV      r0,r7
000042  3030              ADDS     r0,r0,#0x30
                  |L3.68|
000044  f7fffffe          BL       Putchar
                  |L3.72|
000048  7820              LDRB     r0,[r4,#0]  ; CSI
00004a  08c0              LSRS     r0,r0,#3
00004c  42a8              CMP      r0,r5
00004e  d902              BLS      |L3.86|
000050  203b              MOVS     r0,#0x3b
000052  f7fffffe          BL       Putchar
                  |L3.86|
000056  7820              LDRB     r0,[r4,#0]  ; CSI
000058  1c6d              ADDS     r5,r5,#1
00005a  b2ed              UXTB     r5,r5
00005c  08c0              LSRS     r0,r0,#3
00005e  42a8              CMP      r0,r5
000060  d2da              BCS      |L3.24|
000062  4630              MOV      r0,r6
000064  f7fffffe          BL       Putchar
;;;228    }
000068  bdf8              POP      {r3-r7,pc}
;;;229    void PutStr(char *string)
                          ENDP

00006a  0000              DCW      0x0000
                  |L3.108|
                          DCD      ||.bss||
                  |L3.112|
                          DCD      ||i.PutCSI||+0x6c

                          AREA ||i.Clear_CSI||, CODE, READONLY, ALIGN=2

                  Clear_CSI PROC
;;;47     
;;;48     void Clear_CSI(void)
000000  b510              PUSH     {r4,lr}
;;;49     {
;;;50     	memset(&CSI.Parm,0,sizeof(CSI.Parm));
000002  4c06              LDR      r4,|L4.28|
000004  2110              MOVS     r1,#0x10
000006  1ca0              ADDS     r0,r4,#2
000008  f7fffffe          BL       __aeabi_memclr
;;;51     	CSI.Parm_Idx = CSI.End = 0;
00000c  2000              MOVS     r0,#0
00000e  7060              STRB     r0,[r4,#1]
000010  7820              LDRB     r0,[r4,#0]  ; CSI
000012  0740              LSLS     r0,r0,#29
000014  0f40              LSRS     r0,r0,#29
000016  7020              STRB     r0,[r4,#0]
;;;52     }
000018  bd10              POP      {r4,pc}
;;;53     
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      ||.bss||

                          AREA ||i.ControlCode||, CODE, READONLY, ALIGN=2

                  ControlCode PROC
;;;133    
;;;134    void ControlCode(uint8_t Ch)
000000  b510              PUSH     {r4,lr}
;;;135    { 
;;;136    	switch(Ch)
;;;137    	{
;;;138    		case Char_BS:
;;;139    			Cursor_MoveTo(Cursor.X-1,Cursor.Y);	// X--					
;;;140    			break;
;;;141    		
;;;142    		case Char_CR:
;;;143    			if(ANSI_Prefs.AutoLF)
000002  4923              LDR      r1,|L5.144|
000004  4c21              LDR      r4,|L5.140|
000006  7809              LDRB     r1,[r1,#0]
000008  280c              CMP      r0,#0xc               ;136
00000a  d037              BEQ      |L5.124|
00000c  dc06              BGT      |L5.28|
00000e  2808              CMP      r0,#8                 ;136
000010  d00f              BEQ      |L5.50|
000012  280a              CMP      r0,#0xa               ;136
000014  d01d              BEQ      |L5.82|
000016  280b              CMP      r0,#0xb               ;136
000018  d10a              BNE      |L5.48|
00001a  e02a              B        |L5.114|
                  |L5.28|
00001c  280d              CMP      r0,#0xd               ;136
00001e  d00e              BEQ      |L5.62|
000020  281b              CMP      r0,#0x1b              ;136
000022  d105              BNE      |L5.48|
;;;144    				Cursor_MoveTo(0,Cursor.Y+1);					
;;;145    			else
;;;146    				Cursor_MoveTo(0,Cursor.Y);	
;;;147    			break;
;;;148    		
;;;149    		case Char_LF:
;;;150    			if(ANSI_Prefs.AutoCR)
;;;151    				Cursor_MoveTo(0,Cursor.Y+1);					
;;;152    			else
;;;153    				Cursor_MoveTo(Cursor.X,Cursor.Y);	
;;;154    			break;
;;;155    
;;;156    		case Char_HOME:
;;;157    			Cursor_MoveTo(0,0);
;;;158    			break;
;;;159    
;;;160    		case Char_CLS:
;;;161    			VGA_Cls();													// CLS
;;;162    			Cursor.Char = 0;
;;;163    			Cursor_MoveTo(0,0);			
;;;164    			break;
;;;165    		
;;;166    		case Char_ESC:
;;;167    			CSI.State = ANSI_ESC;
000024  481b              LDR      r0,|L5.148|
000026  7801              LDRB     r1,[r0,#0]  ; CSI
000028  08c9              LSRS     r1,r1,#3
00002a  00c9              LSLS     r1,r1,#3
00002c  1c49              ADDS     r1,r1,#1
00002e  7001              STRB     r1,[r0,#0]
                  |L5.48|
;;;168    			break;
;;;169    	 }
;;;170     }
000030  bd10              POP      {r4,pc}
                  |L5.50|
000032  2102              MOVS     r1,#2                 ;139
000034  5661              LDRSB    r1,[r4,r1]            ;139  ; Cursor
000036  7860              LDRB     r0,[r4,#1]            ;139  ; Cursor
000038  1e40              SUBS     r0,r0,#1              ;139
00003a  b240              SXTB     r0,r0                 ;139
00003c  e016              B        |L5.108|
                  |L5.62|
00003e  0708              LSLS     r0,r1,#28             ;143
000040  d503              BPL      |L5.74|
000042  78a0              LDRB     r0,[r4,#2]            ;144  ; Cursor
000044  1c40              ADDS     r0,r0,#1              ;144
000046  b241              SXTB     r1,r0                 ;144
000048  e001              B        |L5.78|
                  |L5.74|
00004a  2102              MOVS     r1,#2                 ;146
00004c  5661              LDRSB    r1,[r4,r1]            ;146  ; Cursor
                  |L5.78|
00004e  2000              MOVS     r0,#0                 ;144
000050  e00c              B        |L5.108|
                  |L5.82|
000052  0748              LSLS     r0,r1,#29             ;150
000054  d506              BPL      |L5.100|
000056  78a0              LDRB     r0,[r4,#2]            ;151  ; Cursor
000058  1c40              ADDS     r0,r0,#1              ;151
00005a  b241              SXTB     r1,r0                 ;151
00005c  2000              MOVS     r0,#0                 ;151
00005e  f7fffffe          BL       Cursor_MoveTo
000062  bd10              POP      {r4,pc}
                  |L5.100|
000064  2102              MOVS     r1,#2                 ;153
000066  5661              LDRSB    r1,[r4,r1]            ;153  ; Cursor
000068  2001              MOVS     r0,#1                 ;153
00006a  5620              LDRSB    r0,[r4,r0]            ;153  ; Cursor
                  |L5.108|
00006c  f7fffffe          BL       Cursor_MoveTo
000070  bd10              POP      {r4,pc}
                  |L5.114|
000072  2100              MOVS     r1,#0                 ;157
000074  4608              MOV      r0,r1                 ;157
000076  f7fffffe          BL       Cursor_MoveTo
00007a  bd10              POP      {r4,pc}
                  |L5.124|
00007c  2119              MOVS     r1,#0x19
00007e  01c9              LSLS     r1,r1,#7
000080  4805              LDR      r0,|L5.152|
000082  f7fffffe          BL       __aeabi_memclr
000086  2000              MOVS     r0,#0                 ;162
000088  7020              STRB     r0,[r4,#0]            ;162
00008a  e7f2              B        |L5.114|
;;;171    
                          ENDP

                  |L5.140|
                          DCD      ||.data||+0x1
                  |L5.144|
                          DCD      ||.data||
                  |L5.148|
                          DCD      ||.bss||
                  |L5.152|
                          DCD      TextBuffer

                          AREA ||i.Cursor_MoveTo||, CODE, READONLY, ALIGN=2

                  Cursor_MoveTo PROC
;;;73     
;;;74     void Cursor_MoveTo(int8_t New_X, int8_t New_Y)
000000  b5f8              PUSH     {r3-r7,lr}
;;;75     {
;;;76     	TEXT_BUF(Cursor.X,Cursor.Y) = Cursor.Char;		// restore character under cursor
000002  4e1a              LDR      r6,|L6.108|
000004  460c              MOV      r4,r1                 ;75
000006  7831              LDRB     r1,[r6,#0]  ; Cursor
000008  4605              MOV      r5,r0                 ;75
00000a  7872              LDRB     r2,[r6,#1]  ; Cursor
00000c  78b0              LDRB     r0,[r6,#2]  ; Cursor
00000e  2350              MOVS     r3,#0x50
000010  4f17              LDR      r7,|L6.112|
000012  4358              MULS     r0,r3,r0
000014  19c0              ADDS     r0,r0,r7
000016  5411              STRB     r1,[r2,r0]
;;;77     	
;;;78     	if(New_X > VGA_TEXT_X-1)
;;;79     	{	
;;;80     		if(ANSI_Prefs.LineWrap)	
000018  4816              LDR      r0,|L6.116|
00001a  2d4f              CMP      r5,#0x4f              ;78
00001c  7800              LDRB     r0,[r0,#0]
00001e  dd05              BLE      |L6.44|
000020  07c1              LSLS     r1,r0,#31
000022  d022              BEQ      |L6.106|
000024  3d50              SUBS     r5,r5,#0x50
;;;81     	  {
;;;82     	    New_X -= VGA_TEXT_X;
000026  1c64              ADDS     r4,r4,#1
000028  b26d              SXTB     r5,r5
;;;83     			New_Y++;
00002a  b264              SXTB     r4,r4
                  |L6.44|
;;;84     		}
;;;85     		else
;;;86     			return;
;;;87     	}
;;;88     	if(New_Y > VGA_TEXT_Y-1)
00002c  2c27              CMP      r4,#0x27
00002e  dd0c              BLE      |L6.74|
;;;89       {
;;;90     	  if(ANSI_Prefs.Scroll)
000030  0780              LSLS     r0,r0,#30
000032  d51a              BPL      |L6.106|
000034  22c3              MOVS     r2,#0xc3
;;;91     	  { 
;;;92     			New_Y = VGA_TEXT_Y-1;
000036  2427              MOVS     r4,#0x27
000038  0112              LSLS     r2,r2,#4
00003a  490f              LDR      r1,|L6.120|
00003c  480c              LDR      r0,|L6.112|
00003e  f7fffffe          BL       __aeabi_memmove
000042  2150              MOVS     r1,#0x50
000044  480d              LDR      r0,|L6.124|
000046  f7fffffe          BL       __aeabi_memclr
                  |L6.74|
;;;93     		  ScrollUp();			
;;;94     		}
;;;95     		else
;;;96     		  return;						
;;;97     	}
;;;98     	if(New_X<0)
00004a  2d00              CMP      r5,#0
00004c  da03              BGE      |L6.86|
00004e  3550              ADDS     r5,r5,#0x50
;;;99     	{ 
;;;100    		New_X += VGA_TEXT_X;
000050  1e64              SUBS     r4,r4,#1
000052  b26d              SXTB     r5,r5
;;;101    		New_Y--;
000054  b264              SXTB     r4,r4
                  |L6.86|
;;;102    	}
;;;103    	if(New_Y<0)
000056  2c00              CMP      r4,#0
000058  da00              BGE      |L6.92|
;;;104    		New_Y = 0;
00005a  2400              MOVS     r4,#0
                  |L6.92|
;;;105    	
;;;106      Cursor.Char = TEXT_BUF(New_X,New_Y);
00005c  2050              MOVS     r0,#0x50
00005e  4360              MULS     r0,r4,r0
000060  1940              ADDS     r0,r0,r5
000062  5c38              LDRB     r0,[r7,r0]
000064  7030              STRB     r0,[r6,#0]
;;;107      Cursor.X = New_X;
000066  7075              STRB     r5,[r6,#1]
;;;108    	Cursor.Y = New_Y;
000068  70b4              STRB     r4,[r6,#2]
                  |L6.106|
;;;109    }
00006a  bdf8              POP      {r3-r7,pc}
;;;110    
                          ENDP

                  |L6.108|
                          DCD      ||.data||+0x1
                  |L6.112|
                          DCD      TextBuffer
                  |L6.116|
                          DCD      ||.data||
                  |L6.120|
                          DCD      TextBuffer+0x50
                  |L6.124|
                          DCD      TextBuffer+0xc30

                          AREA ||i.Cursor_Task||, CODE, READONLY, ALIGN=2

                  Cursor_Task PROC
;;;62     
;;;63     void Cursor_Task(void)
000000  b410              PUSH     {r4}
;;;64     {
;;;65     	Cursor.Update = 0;
000002  480e              LDR      r0,|L7.60|
000004  78c1              LDRB     r1,[r0,#3]  ; Cursor
000006  22df              MOVS     r2,#0xdf
000008  4011              ANDS     r1,r1,r2
00000a  70c1              STRB     r1,[r0,#3]
;;;66     	
;;;67     	if(Cursor.Counter & CURSOR_CHAR)
00000c  78c1              LDRB     r1,[r0,#3]  ; Cursor
00000e  06ca              LSLS     r2,r1,#27
;;;68     		TEXT_BUF(Cursor.X,Cursor.Y) = Cursor.Char;			
000010  490b              LDR      r1,|L7.64|
000012  d501              BPL      |L7.24|
000014  7802              LDRB     r2,[r0,#0]  ; Cursor
000016  e007              B        |L7.40|
                  |L7.24|
;;;69     	else if(Cursor.Type)
000018  78c2              LDRB     r2,[r0,#3]  ; Cursor
00001a  0992              LSRS     r2,r2,#6
00001c  d00a              BEQ      |L7.52|
;;;70         TEXT_BUF(Cursor.X,Cursor.Y) = (Cursor.Type==Cursor_Underline)
00001e  78c2              LDRB     r2,[r0,#3]  ; Cursor
000020  0992              LSRS     r2,r2,#6
000022  2a01              CMP      r2,#1
000024  d008              BEQ      |L7.56|
;;;71     	                                ?Char_Cursor_Uline:Char_Cursor_Block;
000026  225f              MOVS     r2,#0x5f
                  |L7.40|
000028  7843              LDRB     r3,[r0,#1]  ; Cursor
00002a  7880              LDRB     r0,[r0,#2]  ; Cursor
00002c  2450              MOVS     r4,#0x50
00002e  4360              MULS     r0,r4,r0
000030  1840              ADDS     r0,r0,r1
000032  541a              STRB     r2,[r3,r0]
                  |L7.52|
;;;72     }
000034  bc10              POP      {r4}
000036  4770              BX       lr
                  |L7.56|
000038  223f              MOVS     r2,#0x3f              ;71
00003a  e7f5              B        |L7.40|
;;;73     
                          ENDP

                  |L7.60|
                          DCD      ||.data||+0x1
                  |L7.64|
                          DCD      TextBuffer

                          AREA ||i.ESC_Sequence||, CODE, READONLY, ALIGN=1

                  ESC_Sequence PROC
;;;220    
;;;221    void ESC_Sequence(void)
000000  4770              BX       lr
;;;222    {
;;;223    }
;;;224      
                          ENDP


                          AREA ||i.PutCSI||, CODE, READONLY, ALIGN=2

                  PutCSI PROC
;;;245    
;;;246    void PutCSI(uint8_t Cmd)
000000  b5f8              PUSH     {r3-r7,lr}
;;;247    {
000002  4606              MOV      r6,r0
;;;248    	uint8_t i;
;;;249    	
;;;250      PutStr("^[");
000004  a419              ADR      r4,|L9.108|
                  |L9.6|
000006  7820              LDRB     r0,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  f7fffffe          BL       Putchar
00000e  7820              LDRB     r0,[r4,#0]
000010  2800              CMP      r0,#0
000012  d1f8              BNE      |L9.6|
;;;251    	
;;;252    	for(i=0;i<= CSI.Parm_Idx;i++)
000014  4d16              LDR      r5,|L9.112|
000016  2400              MOVS     r4,#0
                  |L9.24|
;;;253    	{
;;;254    		if(CSI.Parm[i])
000018  1928              ADDS     r0,r5,r4
00001a  7880              LDRB     r0,[r0,#2]
00001c  2800              CMP      r0,#0
00001e  d013              BEQ      |L9.72|
000020  2864              CMP      r0,#0x64
000022  d905              BLS      |L9.48|
000024  2164              MOVS     r1,#0x64
000026  f7fffffe          BL       __aeabi_uidivmod
00002a  3030              ADDS     r0,r0,#0x30
00002c  b2c0              UXTB     r0,r0
00002e  e009              B        |L9.68|
                  |L9.48|
000030  210a              MOVS     r1,#0xa
000032  f7fffffe          BL       __aeabi_uidivmod
000036  3030              ADDS     r0,r0,#0x30
000038  460f              MOV      r7,r1
00003a  b2c0              UXTB     r0,r0
00003c  f7fffffe          BL       Putchar
000040  4638              MOV      r0,r7
000042  3030              ADDS     r0,r0,#0x30
                  |L9.68|
000044  f7fffffe          BL       Putchar
                  |L9.72|
;;;255    		  Putint(CSI.Parm[i]);
;;;256    		
;;;257    		if(i<CSI.Parm_Idx)
000048  7828              LDRB     r0,[r5,#0]  ; CSI
00004a  08c0              LSRS     r0,r0,#3
00004c  42a0              CMP      r0,r4
00004e  d902              BLS      |L9.86|
;;;258    			Putchar(';');
000050  203b              MOVS     r0,#0x3b
000052  f7fffffe          BL       Putchar
                  |L9.86|
000056  7828              LDRB     r0,[r5,#0]            ;252  ; CSI
000058  1c64              ADDS     r4,r4,#1
00005a  b2e4              UXTB     r4,r4                 ;252
00005c  08c0              LSRS     r0,r0,#3              ;252
00005e  42a0              CMP      r0,r4                 ;252
000060  d2da              BCS      |L9.24|
;;;259    	}
;;;260    	Putchar(Cmd);
000062  4630              MOV      r0,r6
000064  f7fffffe          BL       Putchar
;;;261    }
000068  bdf8              POP      {r3-r7,pc}
                          ENDP

00006a  0000              DCW      0x0000
                  |L9.108|
00006c  5e5b00            DCB      "^[",0
00006f  00                DCB      0
                  |L9.112|
                          DCD      ||.bss||

                          AREA ||i.PutStr||, CODE, READONLY, ALIGN=1

                  PutStr PROC
;;;228    }
;;;229    void PutStr(char *string)
000000  b510              PUSH     {r4,lr}
;;;230    {
000002  4604              MOV      r4,r0
;;;231    	while(*string)
000004  7800              LDRB     r0,[r0,#0]
000006  2800              CMP      r0,#0
000008  d006              BEQ      |L10.24|
                  |L10.10|
;;;232    	  Putchar(*string++);
00000a  7820              LDRB     r0,[r4,#0]
00000c  1c64              ADDS     r4,r4,#1
00000e  f7fffffe          BL       Putchar
000012  7820              LDRB     r0,[r4,#0]            ;231
000014  2800              CMP      r0,#0                 ;231
000016  d1f8              BNE      |L10.10|
                  |L10.24|
;;;233    }
000018  bd10              POP      {r4,pc}
;;;234     
                          ENDP


                          AREA ||i.Putint||, CODE, READONLY, ALIGN=1

                  Putint PROC
;;;234     
;;;235    void Putint(uint8_t n)
000000  b510              PUSH     {r4,lr}
;;;236    {	
;;;237      if(n>100)
000002  2864              CMP      r0,#0x64
000004  d905              BLS      |L11.18|
;;;238        Putchar(n/100+'0');
000006  2164              MOVS     r1,#0x64
000008  f7fffffe          BL       __aeabi_uidivmod
00000c  3030              ADDS     r0,r0,#0x30
00000e  b2c0              UXTB     r0,r0
000010  e009              B        |L11.38|
                  |L11.18|
;;;239      else
;;;240    	{
;;;241    		Putchar(n/10+'0');
000012  210a              MOVS     r1,#0xa
000014  f7fffffe          BL       __aeabi_uidivmod
000018  3030              ADDS     r0,r0,#0x30
00001a  460c              MOV      r4,r1
00001c  b2c0              UXTB     r0,r0
00001e  f7fffffe          BL       Putchar
;;;242    		Putchar((n%10)+'0');
000022  4620              MOV      r0,r4
000024  3030              ADDS     r0,r0,#0x30
                  |L11.38|
000026  f7fffffe          BL       Putchar
;;;243    	}		
;;;244    }
00002a  bd10              POP      {r4,pc}
;;;245    
                          ENDP


                          AREA ||i.ScrollDown||, CODE, READONLY, ALIGN=2

                  ScrollDown PROC
;;;127    
;;;128    void ScrollDown(void)
000000  b510              PUSH     {r4,lr}
;;;129    {
;;;130    	memmove(&TEXT_BUF(0,1),&TEXT_BUF(0,0),VGA_TEXT_X*(VGA_TEXT_Y-1));
000002  22c3              MOVS     r2,#0xc3
000004  0112              LSLS     r2,r2,#4
000006  4904              LDR      r1,|L12.24|
000008  4804              LDR      r0,|L12.28|
00000a  f7fffffe          BL       __aeabi_memmove
;;;131    	memset(&TEXT_BUF(0,0),FONT_CHAR(' '),VGA_TEXT_X);
00000e  2150              MOVS     r1,#0x50
000010  4801              LDR      r0,|L12.24|
000012  f7fffffe          BL       __aeabi_memclr
;;;132    }
000016  bd10              POP      {r4,pc}
;;;133    
                          ENDP

                  |L12.24|
                          DCD      TextBuffer
                  |L12.28|
                          DCD      TextBuffer+0x50

                          AREA ||i.ScrollUp||, CODE, READONLY, ALIGN=2

                  ScrollUp PROC
;;;121    
;;;122    void ScrollUp(void)
000000  b510              PUSH     {r4,lr}
;;;123    {
;;;124    	memmove(&TEXT_BUF(0,0),&TEXT_BUF(0,1),VGA_TEXT_X*(VGA_TEXT_Y-1));
000002  22c3              MOVS     r2,#0xc3
000004  0112              LSLS     r2,r2,#4
000006  4904              LDR      r1,|L13.24|
000008  4804              LDR      r0,|L13.28|
00000a  f7fffffe          BL       __aeabi_memmove
;;;125    	memset(&TEXT_BUF(0,VGA_TEXT_Y-1),FONT_CHAR(' '),VGA_TEXT_X);
00000e  2150              MOVS     r1,#0x50
000010  4803              LDR      r0,|L13.32|
000012  f7fffffe          BL       __aeabi_memclr
;;;126    }
000016  bd10              POP      {r4,pc}
;;;127    
                          ENDP

                  |L13.24|
                          DCD      TextBuffer+0x50
                  |L13.28|
                          DCD      TextBuffer
                  |L13.32|
                          DCD      TextBuffer+0xc30

                          AREA ||i.VGA_Cls||, CODE, READONLY, ALIGN=2

                  VGA_Cls PROC
;;;116    
;;;117    void VGA_Cls(void)
000000  b510              PUSH     {r4,lr}
;;;118    {
;;;119    	memset(TextBuffer,FONT_CHAR(' '),VGA_TEXT_X*VGA_TEXT_Y);
000002  2119              MOVS     r1,#0x19
000004  01c9              LSLS     r1,r1,#7
000006  4802              LDR      r0,|L14.16|
000008  f7fffffe          BL       __aeabi_memclr
;;;120    }
00000c  bd10              POP      {r4,pc}
;;;121    
                          ENDP

00000e  0000              DCW      0x0000
                  |L14.16|
                          DCD      TextBuffer

                          AREA ||i.VGA_Putch||, CODE, READONLY, ALIGN=2

                  VGA_Putch PROC
;;;110    
;;;111    void VGA_Putch(uint8_t Ch)
000000  b510              PUSH     {r4,lr}
;;;112    {
000002  3820              SUBS     r0,r0,#0x20
;;;113    	Cursor.Char = (Ch>=FONT_START)&&(Ch<=FONT_END)?FONT_CHAR(Ch):FONT_CHAR(' ');
000004  285f              CMP      r0,#0x5f
000006  d900              BLS      |L15.10|
000008  2000              MOVS     r0,#0
                  |L15.10|
00000a  4a05              LDR      r2,|L15.32|
00000c  7010              STRB     r0,[r2,#0]
;;;114    	Cursor_MoveTo(Cursor.X+1,Cursor.Y);
00000e  2102              MOVS     r1,#2
000010  5651              LDRSB    r1,[r2,r1]  ; Cursor
000012  7850              LDRB     r0,[r2,#1]  ; Cursor
000014  1c40              ADDS     r0,r0,#1
000016  b240              SXTB     r0,r0
000018  f7fffffe          BL       Cursor_MoveTo
;;;115    }
00001c  bd10              POP      {r4,pc}
;;;116    
                          ENDP

00001e  0000              DCW      0x0000
                  |L15.32|
                          DCD      ||.data||+0x1

                          AREA ||i.VerticalBlank_CB||, CODE, READONLY, ALIGN=2

                  VerticalBlank_CB PROC
;;;37     // Vertical blanking call back
;;;38     void VerticalBlank_CB(void)
000000  4808              LDR      r0,|L16.36|
;;;39     { 
;;;40     	// update the lower counter field to save RAM	
;;;41     	Cursor.Counter++;
000002  78c1              LDRB     r1,[r0,#3]  ; Cursor
000004  78c2              LDRB     r2,[r0,#3]  ; Cursor
000006  1c49              ADDS     r1,r1,#1
000008  06c9              LSLS     r1,r1,#27
00000a  0ec9              LSRS     r1,r1,#27
00000c  0952              LSRS     r2,r2,#5
00000e  0152              LSLS     r2,r2,#5
000010  430a              ORRS     r2,r2,r1
000012  70c2              STRB     r2,[r0,#3]
;;;42     	
;;;43     	// update cursor in task to simplify sharing.
;;;44     	if(!(Cursor.Counter & CURSOR_UPDATE_MASK))
000014  78c1              LDRB     r1,[r0,#3]  ; Cursor
000016  0709              LSLS     r1,r1,#28
000018  d103              BNE      |L16.34|
;;;45         Cursor.Update=1;
00001a  78c1              LDRB     r1,[r0,#3]  ; Cursor
00001c  2220              MOVS     r2,#0x20
00001e  4311              ORRS     r1,r1,r2
000020  70c1              STRB     r1,[r0,#3]
                  |L16.34|
;;;46     }
000022  4770              BX       lr
;;;47     
                          ENDP

                  |L16.36|
                          DCD      ||.data||+0x1

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ||CSI||
                          %        18

                          AREA ||.data||, DATA, ALIGN=0

                  ANSI_Prefs
000000  00                DCB      0x00
                  Cursor
000001  000000            DCB      0x00,0x00,0x00
000004  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "ansi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_ansi_c_857c183e____REV16|
#line 129 "C:\\CAD\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_ansi_c_857c183e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_ansi_c_857c183e____REVSH|
#line 144
|__asm___6_ansi_c_857c183e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
