; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\serial.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\serial.d --cpu=Cortex-M0 --apcs=interwork -O3 -Otime --diag_suppress=9931 -IC:\CAD\Keil_v5\ARM\RV31\INC -IC:\CAD\Keil_v5\ARM\CMSIS\Include -IC:\CAD\Keil_v5\ARM\Inc\ST\STM32F0xx -D__UVISION_VERSION=514 -DSTM32F030 --omf_browse=.\objects\serial.crf serial.c]
                          THUMB

                          AREA ||i.Putchar||, CODE, READONLY, ALIGN=2

                  Putchar PROC
;;;67     
;;;68     void Putchar( uint8_t data )
000000  b510              PUSH     {r4,lr}
;;;69     {
000002  4604              MOV      r4,r0
                  |L1.4|
;;;70     	while(!FIFO_Write((FIFO*)TxBuf,data))
000004  4621              MOV      r1,r4
000006  4805              LDR      r0,|L1.28|
000008  f7fffffe          BL       FIFO_Write
00000c  2800              CMP      r0,#0
00000e  d0f9              BEQ      |L1.4|
;;;71     	  /* busy wait */;
;;;72     	
;;;73       USART1->CR1 |= USART_CR1_TXEIE;												// Enable Tx Empty interrupt
000010  4803              LDR      r0,|L1.32|
000012  6801              LDR      r1,[r0,#0]
000014  2280              MOVS     r2,#0x80
000016  4311              ORRS     r1,r1,r2
000018  6001              STR      r1,[r0,#0]
;;;74     }
00001a  bd10              POP      {r4,pc}
                          ENDP

                  |L1.28|
                          DCD      ||.data||+0x7
                  |L1.32|
                          DCD      0x40013800

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;49     
;;;50     void USART1_IRQHandler(void)
000000  b538              PUSH     {r3-r5,lr}
;;;51     {
;;;52     	if(USART1->ISR & USART_ISR_RXNE)											// Rx data
000002  4c0e              LDR      r4,|L2.60|
000004  69e0              LDR      r0,[r4,#0x1c]
;;;53     	{
;;;54     		FIFO_Write((FIFO*)RxBuf,USART1->RDR);	
000006  4d0e              LDR      r5,|L2.64|
000008  0680              LSLS     r0,r0,#26             ;52
00000a  d504              BPL      |L2.22|
00000c  88a8              LDRH     r0,[r5,#4]
00000e  b2c1              UXTB     r1,r0
000010  480c              LDR      r0,|L2.68|
000012  f7fffffe          BL       FIFO_Write
                  |L2.22|
;;;55     	}
;;;56     	
;;;57     	if(USART1->ISR & USART_ISR_TXE)												// Tx empty
000016  69e0              LDR      r0,[r4,#0x1c]
000018  0600              LSLS     r0,r0,#24
00001a  d508              BPL      |L2.46|
;;;58     	{
;;;59     		uint8_t TxD;
;;;60     		
;;;61     		if(FIFO_Read((FIFO*)TxBuf,&TxD))
00001c  4669              MOV      r1,sp
00001e  480a              LDR      r0,|L2.72|
000020  f7fffffe          BL       FIFO_Read
000024  2800              CMP      r0,#0
000026  d003              BEQ      |L2.48|
;;;62     			USART1->TDR = TxD;																// TDR is 16-bit!
000028  4668              MOV      r0,sp
00002a  7800              LDRB     r0,[r0,#0]
00002c  8128              STRH     r0,[r5,#8]
                  |L2.46|
;;;63     		else
;;;64     			USART1->CR1 &= ~USART_CR1_TXEIE;									// Disable Tx Empty interrupt
;;;65     	}
;;;66     }
00002e  bd38              POP      {r3-r5,pc}
                  |L2.48|
000030  6820              LDR      r0,[r4,#0]            ;64
000032  2180              MOVS     r1,#0x80              ;64
000034  4388              BICS     r0,r0,r1              ;64
000036  6020              STR      r0,[r4,#0]            ;64
000038  bd38              POP      {r3-r5,pc}
;;;67     
                          ENDP

00003a  0000              DCW      0x0000
                  |L2.60|
                          DCD      0x40013800
                  |L2.64|
                          DCD      0x40013820
                  |L2.68|
                          DCD      ||.data||
                  |L2.72|
                          DCD      ||.data||+0x7

                          AREA ||i.USART_Init||, CODE, READONLY, ALIGN=2

                  USART_Init PROC
;;;31     
;;;32     void USART_Init(void)
000000  b510              PUSH     {r4,lr}
;;;33     {
;;;34     	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;									// Enable UART1 clock
000002  480f              LDR      r0,|L3.64|
000004  6981              LDR      r1,[r0,#0x18]
000006  2201              MOVS     r2,#1
000008  0392              LSLS     r2,r2,#14
00000a  4311              ORRS     r1,r1,r2
00000c  6181              STR      r1,[r0,#0x18]
;;;35       USART1->BRR = CPU_CLOCK/UART_BAUD;										// Set default baud rate
00000e  21ff              MOVS     r1,#0xff
000010  480c              LDR      r0,|L3.68|
000012  31b3              ADDS     r1,r1,#0xb3
000014  8181              STRH     r1,[r0,#0xc]
;;;36     #ifdef AUTOBAUD
;;;37     	USART1->CR2 = USART_CR2_ABRMODE_0|USART_CR2_ABREN;		// enable autobaud, 1 stop bit
;;;38     #endif
;;;39       USART1->CR1 = USART_CR1_RXNEIE|												// Receive not empty
000016  212d              MOVS     r1,#0x2d
000018  6001              STR      r1,[r0,#0]
;;;40     								USART_CR1_RE|USART_CR1_TE|USART_CR1_UE; // 8-bit, 1 start bit, no parity, 16X oversampling
;;;41     
;;;42     	FIFO_Clear((FIFO*)RxBuf);
00001a  480b              LDR      r0,|L3.72|
00001c  f7fffffe          BL       FIFO_Clear
;;;43     	FIFO_Clear((FIFO*)TxBuf);
000020  480a              LDR      r0,|L3.76|
000022  f7fffffe          BL       FIFO_Clear
000026  480a              LDR      r0,|L3.80|
000028  6801              LDR      r1,[r0,#0]
00002a  0209              LSLS     r1,r1,#8
00002c  0a09              LSRS     r1,r1,#8
00002e  06c2              LSLS     r2,r0,#27
000030  4311              ORRS     r1,r1,r2
000032  6001              STR      r1,[r0,#0]
000034  2001              MOVS     r0,#1
000036  4907              LDR      r1,|L3.84|
000038  06c0              LSLS     r0,r0,#27
00003a  6008              STR      r0,[r1,#0]
;;;44     	
;;;45       // NVIC IRQ
;;;46       NVIC_SetPriority(USART1_IRQn,USART_IRQ_PRIORITY);			// Lowest priority																	// Highest priority
;;;47       NVIC_EnableIRQ(USART1_IRQn);
;;;48     }
00003c  bd10              POP      {r4,pc}
;;;49     
                          ENDP

00003e  0000              DCW      0x0000
                  |L3.64|
                          DCD      0x40021000
                  |L3.68|
                          DCD      0x40013800
                  |L3.72|
                          DCD      ||.data||
                  |L3.76|
                          DCD      ||.data||+0x7
                  |L3.80|
                          DCD      0xe000e418
                  |L3.84|
                          DCD      0xe000e100

                          AREA ||.data||, DATA, ALIGN=0

                  RxBuf
000000  03000000          DCB      0x03,0x00,0x00,0x00
000004  000000            DCB      0x00,0x00,0x00
                  TxBuf
000007  0f                DCB      0x0f
                          %        16
000018  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "serial.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_serial_c_RxBuf____REV16|
#line 129 "C:\\CAD\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_serial_c_RxBuf____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_serial_c_RxBuf____REVSH|
#line 144
|__asm___8_serial_c_RxBuf____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
