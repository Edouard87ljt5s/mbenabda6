; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\ps2.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ps2.d --cpu=Cortex-M0 --apcs=interwork -O3 -Otime --diag_suppress=9931 -IC:\CAD\Keil_v5\ARM\RV31\INC -IC:\CAD\Keil_v5\ARM\CMSIS\Include -IC:\CAD\Keil_v5\ARM\Inc\ST\STM32F0xx -D__UVISION_VERSION=514 -DSTM32F030 --omf_browse=.\objects\ps2.crf ps2.c]
                          THUMB

                          AREA ||i.EXTI0_1_IRQHandler||, CODE, READONLY, ALIGN=2

                  EXTI0_1_IRQHandler PROC
;;;54     // PS/2 IRQ handler at PA1
;;;55     void EXTI0_1_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;56     {
;;;57     	EXTI->PR = EXTI_PR_PR1;													// Clear interrupt
000002  4940              LDR      r1,|L1.260|
000004  2002              MOVS     r0,#2
000006  6148              STR      r0,[r1,#0x14]
;;;58     
;;;59       if(PS2_IF.States.WriteMode)											// Send command
000008  4c3f              LDR      r4,|L1.264|
00000a  7860              LDRB     r0,[r4,#1]  ; PS2_IF
;;;60       { 
;;;61     		if(++PS2_IF.States.BitCnt==PS2_TX_BITS)
;;;62     		{ 
;;;63     			PS2_PORT->BSRR = PIN_SET(PS2_DAT); 					// ACK bit = 1
00000c  2109              MOVS     r1,#9
00000e  09c3              LSRS     r3,r0,#7              ;59
000010  2201              MOVS     r2,#1
000012  2087              MOVS     r0,#0x87              ;61
000014  06c9              LSLS     r1,r1,#27
000016  2500              MOVS     r5,#0
000018  2b00              CMP      r3,#0                 ;59
00001a  d021              BEQ      |L1.96|
00001c  7863              LDRB     r3,[r4,#1]            ;61  ; PS2_IF
00001e  7866              LDRB     r6,[r4,#1]            ;61  ; PS2_IF
000020  065b              LSLS     r3,r3,#25             ;61
000022  0f1b              LSRS     r3,r3,#28             ;61
000024  1c5b              ADDS     r3,r3,#1              ;61
000026  071b              LSLS     r3,r3,#28             ;61
000028  0e5b              LSRS     r3,r3,#25             ;61
00002a  4006              ANDS     r6,r6,r0              ;61
00002c  431e              ORRS     r6,r6,r3              ;61
00002e  7066              STRB     r6,[r4,#1]            ;61
000030  0670              LSLS     r0,r6,#25             ;61
000032  0f00              LSRS     r0,r0,#28             ;61
000034  280c              CMP      r0,#0xc               ;61
000036  d004              BEQ      |L1.66|
;;;64     			PS2_IF.Init =0;
;;;65     		}
;;;66     		else
;;;67     		{
;;;68     			PS2_PORT->BSRR = (PS2_IF.States.Code & 0x01)?PIN_SET(PS2_DAT):PIN_CLR(PS2_DAT);			
000038  8820              LDRH     r0,[r4,#0]  ; PS2_IF
00003a  07c0              LSLS     r0,r0,#31
00003c  d004              BEQ      |L1.72|
00003e  2001              MOVS     r0,#1
000040  e004              B        |L1.76|
                  |L1.66|
000042  618a              STR      r2,[r1,#0x18]         ;63
000044  8025              STRH     r5,[r4,#0]            ;64
;;;69     			PS2_IF.States.Code >>= 1;			
;;;70     		}
;;;71       }
;;;72       else																						// receive key code
;;;73     	{ 	
;;;74     		if(!MicroTimer1)
;;;75     			PS2_IF.Init = 0;
;;;76     		
;;;77     		MicroTimer1 = us_to_Tick(PS2_BIT_TIMEOUT);
;;;78     		
;;;79     		if(PS2_PORT->IDR & PS2_DAT_BIT)
;;;80     			PS2_IF.States.Code |= (1<<PS2_IF.States.BitCnt);
;;;81     
;;;82     		if(++PS2_IF.States.BitCnt==PS2_RX_BITS)
;;;83     		{ 
;;;84     			// Check for valid Start, Stop bits and parity bits
;;;85     			if (!(PS2_IF.States.Code & PS2_START_BIT) && 
;;;86     					 (PS2_IF.States.Code & PS2_STOP_BIT) &&
;;;87     					 ((PS2_IF.States.Code & PS2_PARITY_BIT)==PS2_Parity(PS2_IF.States.Code>>1)))
;;;88     
;;;89     				FIFO_Write((FIFO*)PS2_Buf,(PS2_IF.States.Code >>1)&0xff);
;;;90     			else
;;;91     				FIFO_Write((FIFO*)PS2_Buf,PS2_KBD_ERR_CODE);
;;;92     			
;;;93     			PS2_IF.Init =0;
;;;94     		}
;;;95     	}
;;;96     }
000046  bd70              POP      {r4-r6,pc}
                  |L1.72|
000048  2001              MOVS     r0,#1                 ;68
00004a  0400              LSLS     r0,r0,#16             ;68
                  |L1.76|
00004c  6188              STR      r0,[r1,#0x18]         ;68
00004e  8820              LDRH     r0,[r4,#0]            ;69  ; PS2_IF
000050  8821              LDRH     r1,[r4,#0]            ;69  ; PS2_IF
000052  0540              LSLS     r0,r0,#21             ;69
000054  0d80              LSRS     r0,r0,#22             ;69
000056  0ac9              LSRS     r1,r1,#11             ;69
000058  02c9              LSLS     r1,r1,#11             ;69
00005a  4301              ORRS     r1,r1,r0              ;69
00005c  8021              STRH     r1,[r4,#0]            ;69
                  |L1.94|
00005e  bd70              POP      {r4-r6,pc}
                  |L1.96|
000060  4b2a              LDR      r3,|L1.268|
000062  781e              LDRB     r6,[r3,#0]            ;74  ; MicroTimer1
000064  2e00              CMP      r6,#0                 ;74
000066  d100              BNE      |L1.106|
000068  8025              STRH     r5,[r4,#0]            ;75
                  |L1.106|
00006a  2609              MOVS     r6,#9                 ;77
00006c  701e              STRB     r6,[r3,#0]            ;77
00006e  8a09              LDRH     r1,[r1,#0x10]         ;79
000070  07c9              LSLS     r1,r1,#31             ;79
000072  d00c              BEQ      |L1.142|
000074  8821              LDRH     r1,[r4,#0]            ;80  ; PS2_IF
000076  7863              LDRB     r3,[r4,#1]            ;80  ; PS2_IF
000078  065b              LSLS     r3,r3,#25             ;80
00007a  0f1b              LSRS     r3,r3,#28             ;80
00007c  409a              LSLS     r2,r2,r3              ;80
00007e  4311              ORRS     r1,r1,r2              ;80
000080  0549              LSLS     r1,r1,#21             ;80
000082  8822              LDRH     r2,[r4,#0]            ;80  ; PS2_IF
000084  0d49              LSRS     r1,r1,#21             ;80
000086  0ad2              LSRS     r2,r2,#11             ;80
000088  02d2              LSLS     r2,r2,#11             ;80
00008a  430a              ORRS     r2,r2,r1              ;80
00008c  8022              STRH     r2,[r4,#0]            ;80
                  |L1.142|
00008e  7861              LDRB     r1,[r4,#1]            ;82  ; PS2_IF
000090  7862              LDRB     r2,[r4,#1]            ;82  ; PS2_IF
000092  0649              LSLS     r1,r1,#25             ;82
000094  0f09              LSRS     r1,r1,#28             ;82
000096  1c49              ADDS     r1,r1,#1              ;82
000098  0709              LSLS     r1,r1,#28             ;82
00009a  0e49              LSRS     r1,r1,#25             ;82
00009c  4002              ANDS     r2,r2,r0              ;82
00009e  430a              ORRS     r2,r2,r1              ;82
0000a0  7062              STRB     r2,[r4,#1]            ;82
0000a2  0650              LSLS     r0,r2,#25             ;82
0000a4  0f00              LSRS     r0,r0,#28             ;82
0000a6  280b              CMP      r0,#0xb               ;82
0000a8  d1d9              BNE      |L1.94|
0000aa  8820              LDRH     r0,[r4,#0]            ;85  ; PS2_IF
0000ac  07c0              LSLS     r0,r0,#31             ;85
0000ae  d123              BNE      |L1.248|
0000b0  8820              LDRH     r0,[r4,#0]            ;86  ; PS2_IF
0000b2  0540              LSLS     r0,r0,#21             ;86
0000b4  d520              BPL      |L1.248|
0000b6  8820              LDRH     r0,[r4,#0]            ;87  ; PS2_IF
0000b8  2100              MOVS     r1,#0                 ;87
0000ba  05c0              LSLS     r0,r0,#23             ;87
0000bc  0e00              LSRS     r0,r0,#24             ;87
0000be  2208              MOVS     r2,#8                 ;87
                  |L1.192|
0000c0  07c3              LSLS     r3,r0,#31             ;87
0000c2  0fdb              LSRS     r3,r3,#31             ;87
0000c4  1859              ADDS     r1,r3,r1              ;87
0000c6  1e52              SUBS     r2,r2,#1              ;87
0000c8  0840              LSRS     r0,r0,#1              ;87
0000ca  0612              LSLS     r2,r2,#24             ;87
0000cc  b2c9              UXTB     r1,r1                 ;87
0000ce  0e12              LSRS     r2,r2,#24             ;87
0000d0  d1f6              BNE      |L1.192|
0000d2  07c8              LSLS     r0,r1,#31             ;87
0000d4  d001              BEQ      |L1.218|
0000d6  2000              MOVS     r0,#0                 ;87
0000d8  e001              B        |L1.222|
                  |L1.218|
0000da  2001              MOVS     r0,#1                 ;87
0000dc  0240              LSLS     r0,r0,#9              ;87
                  |L1.222|
0000de  8821              LDRH     r1,[r4,#0]            ;87  ; PS2_IF
0000e0  0589              LSLS     r1,r1,#22             ;87
0000e2  0fc9              LSRS     r1,r1,#31             ;87
0000e4  0249              LSLS     r1,r1,#9              ;87
0000e6  4288              CMP      r0,r1                 ;87
0000e8  d106              BNE      |L1.248|
0000ea  8820              LDRH     r0,[r4,#0]            ;89  ; PS2_IF
0000ec  05c0              LSLS     r0,r0,#23             ;89
0000ee  0e01              LSRS     r1,r0,#24             ;89
0000f0  4807              LDR      r0,|L1.272|
0000f2  f7fffffe          BL       FIFO_Write
0000f6  e003              B        |L1.256|
                  |L1.248|
0000f8  21ff              MOVS     r1,#0xff              ;91
0000fa  4805              LDR      r0,|L1.272|
0000fc  f7fffffe          BL       FIFO_Write
                  |L1.256|
000100  8025              STRH     r5,[r4,#0]            ;93
000102  bd70              POP      {r4-r6,pc}
;;;97     
                          ENDP

                  |L1.260|
                          DCD      0x40010400
                  |L1.264|
                          DCD      ||.data||+0x4
                  |L1.268|
                          DCD      MicroTimer1
                  |L1.272|
                          DCD      ||.data||+0x6

                          AREA ||i.Key_Cursor||, CODE, READONLY, ALIGN=1

                  Key_Cursor PROC
;;;318    
;;;319    void Key_Cursor(uint8_t key)
000000  4770              BX       lr
;;;320    {
;;;321    }
;;;322    
                          ENDP


                          AREA ||i.Key_FN||, CODE, READONLY, ALIGN=1

                  Key_FN PROC
;;;314    	
;;;315    void Key_FN(uint8_t key)
000000  4770              BX       lr
;;;316    {
;;;317    }
;;;318    
                          ENDP


                          AREA ||i.Key_Modifers||, CODE, READONLY, ALIGN=2

                  Key_Modifers PROC
;;;285    	
;;;286    void Key_Modifers(uint8_t key)	
000000  b5f8              PUSH     {r3-r7,lr}
;;;287    {	
;;;288    	switch(key)
;;;289    	{
;;;290    		case KEY_SCROLL:
;;;291    		case KEY_NUMLOCK:
;;;292    		case KEY_CAP:
;;;293    			if (PS2_Modifier.Attr.Release)
000002  4a25              LDR      r2,|L4.152|
000004  4604              MOV      r4,r0                 ;288
000006  7811              LDRB     r1,[r2,#0]
;;;294    				PS2_Fsm.PrevKey = 0;
;;;295    			else if (PS2_Fsm.PrevKey != PREV_MODKEY(key))
;;;296    			{	
;;;297    				PS2_Fsm.PrevKey = PREV_MODKEY(key);
;;;298    				PS2_Modifier.Attr.LED ^= MODIFIER(key);
000008  2501              MOVS     r5,#1
00000a  09cb              LSRS     r3,r1,#7              ;293
00000c  3c80              SUBS     r4,r4,#0x80           ;288
;;;299    				PS2_Update_LED(PS2_Modifier.Attr.LED);
;;;300    			}
;;;301    			break;
;;;302    
;;;303    		case KEY_SHIFT:
;;;304    			PS2_Modifier.Attr.Shift = !PS2_Modifier.Attr.Release;
00000e  406b              EORS     r3,r3,r5
000010  2c06              CMP      r4,#6                 ;288
000012  d20f              BCS      |L4.52|
000014  0026              MOVS     r6,r4                 ;288
000016  447e              ADD      r6,r6,pc              ;288
000018  7936              LDRB     r6,[r6,#4]            ;288
00001a  19b6              ADDS     r6,r6,r6              ;288
00001c  44b7              ADD      pc,pc,r6              ;288
00001e  0202              DCB      0x02,0x02
000020  022a3036          DCB      0x02,0x2a,0x30,0x36
000024  4c1d              LDR      r4,|L4.156|
000026  26f3              MOVS     r6,#0xf3              ;294
000028  7823              LDRB     r3,[r4,#0]            ;294
00002a  09cf              LSRS     r7,r1,#7              ;293
00002c  401e              ANDS     r6,r6,r3              ;294
00002e  2f00              CMP      r7,#0                 ;293
000030  d001              BEQ      |L4.54|
000032  7026              STRB     r6,[r4,#0]            ;294
                  |L4.52|
;;;305    		  break;
;;;306    		case KEY_CTRL:
;;;307    			PS2_Modifier.Attr.Ctrl = !PS2_Modifier.Attr.Release;
;;;308    			break;
;;;309    		case KEY_ALT:
;;;310    			PS2_Modifier.Attr.Alt = !PS2_Modifier.Attr.Release;
;;;311    			break;
;;;312    	}
;;;313    }
000034  bdf8              POP      {r3-r7,pc}
                  |L4.54|
000036  071b              LSLS     r3,r3,#28             ;295
000038  4607              MOV      r7,r0                 ;295
00003a  0f9b              LSRS     r3,r3,#30             ;295
00003c  3f7f              SUBS     r7,r7,#0x7f           ;295
00003e  42bb              CMP      r3,r7                 ;295
000040  d0f8              BEQ      |L4.52|
000042  0083              LSLS     r3,r0,#2              ;295
000044  1d1b              ADDS     r3,r3,#4              ;295
000046  071b              LSLS     r3,r3,#28             ;297
000048  0f1b              LSRS     r3,r3,#28             ;297
00004a  0740              LSLS     r0,r0,#29             ;298
00004c  0f40              LSRS     r0,r0,#29             ;298
00004e  4085              LSLS     r5,r5,r0              ;298
000050  0768              LSLS     r0,r5,#29             ;298
000052  0f40              LSRS     r0,r0,#29             ;298
000054  4041              EORS     r1,r1,r0              ;298
000056  4333              ORRS     r3,r3,r6              ;297
000058  7011              STRB     r1,[r2,#0]            ;298
00005a  0898              LSRS     r0,r3,#2              ;298
00005c  0080              LSLS     r0,r0,#2              ;298
00005e  1c80              ADDS     r0,r0,#2              ;298
000060  7020              STRB     r0,[r4,#0]            ;298
000062  4a0d              LDR      r2,|L4.152|
000064  0749              LSLS     r1,r1,#29             ;299
000066  20ed              MOVS     r0,#0xed              ;299
000068  0f49              LSRS     r1,r1,#29             ;299
00006a  7090              STRB     r0,[r2,#2]            ;299
00006c  70d1              STRB     r1,[r2,#3]            ;299
00006e  f7fffffe          BL       PS2_Send
000072  bdf8              POP      {r3-r7,pc}
000074  20f7              MOVS     r0,#0xf7              ;304
000076  4001              ANDS     r1,r1,r0              ;304
000078  00d8              LSLS     r0,r3,#3              ;304
00007a  4301              ORRS     r1,r1,r0              ;304
00007c  7011              STRB     r1,[r2,#0]            ;304
00007e  bdf8              POP      {r3-r7,pc}
000080  20ef              MOVS     r0,#0xef              ;307
000082  4001              ANDS     r1,r1,r0              ;307
000084  0118              LSLS     r0,r3,#4              ;307
000086  4301              ORRS     r1,r1,r0              ;307
000088  7011              STRB     r1,[r2,#0]            ;307
00008a  bdf8              POP      {r3-r7,pc}
00008c  20df              MOVS     r0,#0xdf              ;310
00008e  4001              ANDS     r1,r1,r0              ;310
000090  0158              LSLS     r0,r3,#5              ;310
000092  4301              ORRS     r1,r1,r0              ;310
000094  7011              STRB     r1,[r2,#0]            ;310
000096  bdf8              POP      {r3-r7,pc}
;;;314    	
                          ENDP

                  |L4.152|
                          DCD      ||.data||
                  |L4.156|
                          DCD      ||.data||+0x1

                          AREA ||i.Key_Other||, CODE, READONLY, ALIGN=1

                  Key_Other PROC
;;;322    
;;;323    void Key_Other(uint8_t key)
000000  4770              BX       lr
;;;324    {
;;;325    }
                          ENDP


                          AREA ||i.PS2_Decode||, CODE, READONLY, ALIGN=2

                  PS2_Decode PROC
;;;226    
;;;227    void PS2_Decode(uint8_t key_code)
000000  b5f0              PUSH     {r4-r7,lr}
;;;228    {
000002  4606              MOV      r6,r0
;;;229    	uint8_t key;
;;;230    	
;;;231    	if (key_code <= MAX_KEYTBL)
;;;232    	  key = Kbd_Code[key_code*2];	
000004  0040              LSLS     r0,r0,#1
000006  492f              LDR      r1,|L6.196|
000008  b083              SUB      sp,sp,#0xc            ;228
00000a  2e83              CMP      r6,#0x83              ;231
00000c  d800              BHI      |L6.16|
00000e  5c0c              LDRB     r4,[r1,r0]
                  |L6.16|
;;;233    	
;;;234      if(KEY_TYPE(key)==KEY_MODIFERS)
000010  0920              LSRS     r0,r4,#4
000012  2808              CMP      r0,#8
000014  d004              BEQ      |L6.32|
;;;235    		Key_Modifers(key);		
;;;236    	else if(!PS2_Modifier.Attr.Release)														// Only make events
000016  482c              LDR      r0,|L6.200|
000018  7805              LDRB     r5,[r0,#0]  ; PS2_Modifier
00001a  09e8              LSRS     r0,r5,#7
00001c  d004              BEQ      |L6.40|
00001e  e047              B        |L6.176|
                  |L6.32|
000020  4620              MOV      r0,r4                 ;235
000022  f7fffffe          BL       Key_Modifers
000026  e043              B        |L6.176|
                  |L6.40|
;;;237    	{
;;;238    		switch(KEY_TYPE(key))
000028  0920              LSRS     r0,r4,#4
00002a  0100              LSLS     r0,r0,#4
00002c  2890              CMP      r0,#0x90
00002e  d03f              BEQ      |L6.176|
000030  28a0              CMP      r0,#0xa0
000032  d03d              BEQ      |L6.176|
000034  28b0              CMP      r0,#0xb0
000036  d03b              BEQ      |L6.176|
;;;239    		{			
;;;240    			case KEY_FN_KEYS:
;;;241    				Key_FN(key);
;;;242    				break;
;;;243    			
;;;244    			case KEY_CURSORS:
;;;245    				Key_Cursor(key);
;;;246    				break;
;;;247    			
;;;248    			case KEY_OTHERS:
;;;249    				Key_Other(key);
;;;250    				break;
;;;251    			
;;;252    			default:
;;;253    			  if(PS2_Modifier.Attr.Ctrl)														// Control keys
000038  06e8              LSLS     r0,r5,#27
;;;254    			  {
;;;255    					const char Ctrl_Str[] = "[\\]`/";
;;;256    					char *pos= strchr(Ctrl_Str,key);
;;;257    					
;;;258    					if (key ==' ')																			// Ctrl-Space
;;;259    						key = 0;
;;;260    					else if(isalpha(key))																// A-Z
00003a  2798              MOVS     r7,#0x98
00003c  2800              CMP      r0,#0                 ;253
00003e  da1d              BGE      |L6.124|
000040  a122              ADR      r1,|L6.204|
000042  6808              LDR      r0,[r1,#0]            ;255
000044  6849              LDR      r1,[r1,#4]            ;255
000046  9101              STR      r1,[sp,#4]            ;256
000048  9000              STR      r0,[sp,#0]            ;256
00004a  4621              MOV      r1,r4                 ;256
00004c  4668              MOV      r0,sp                 ;256
00004e  f7fffffe          BL       strchr
000052  4605              MOV      r5,r0                 ;256
000054  2c20              CMP      r4,#0x20              ;258
000056  d008              BEQ      |L6.106|
000058  f7fffffe          BL       __rt_ctype_table
00005c  6800              LDR      r0,[r0,#0]
00005e  5d00              LDRB     r0,[r0,r4]
000060  4238              TST      r0,r7
000062  d004              BEQ      |L6.110|
000064  3c60              SUBS     r4,r4,#0x60
;;;261    						key = key - 'a' + 1;			
000066  b2e4              UXTB     r4,r4
000068  e01f              B        |L6.170|
                  |L6.106|
00006a  2400              MOVS     r4,#0                 ;259
00006c  e01d              B        |L6.170|
                  |L6.110|
;;;262    			    else if (pos)
00006e  2d00              CMP      r5,#0
000070  d025              BEQ      |L6.190|
;;;263    						key = (pos - Ctrl_Str)+KEY_ESC;
000072  4668              MOV      r0,sp
000074  1a28              SUBS     r0,r5,r0
000076  301b              ADDS     r0,r0,#0x1b
000078  b2c4              UXTB     r4,r0
00007a  e016              B        |L6.170|
                  |L6.124|
;;;264    					else
;;;265    						return;
;;;266    				}
;;;267    				// handles Alt here
;;;268    				
;;;269    				else if(isprint(key))
00007c  f7fffffe          BL       __rt_ctype_table
000080  6800              LDR      r0,[r0,#0]
000082  5d01              LDRB     r1,[r0,r4]
000084  0688              LSLS     r0,r1,#26
000086  0ec0              LSRS     r0,r0,#27
000088  d00f              BEQ      |L6.170|
00008a  4a0e              LDR      r2,|L6.196|
00008c  0070              LSLS     r0,r6,#1              ;232
;;;270    				{
;;;271    					if(isalpha(key))																		// Logical XOR caps lock & Shift
00008e  4039              ANDS     r1,r1,r7
;;;272              {
;;;273                if(!!(PS2_Modifier.Attr.LED & PS2_MOD_CAPS)!= !!PS2_Modifier.Attr.Shift)
;;;274    						  key = Kbd_Code[key_code*2+1];
000090  1880              ADDS     r0,r0,r2
000092  2900              CMP      r1,#0                 ;271
000094  d006              BEQ      |L6.164|
000096  0769              LSLS     r1,r5,#29             ;273
000098  072a              LSLS     r2,r5,#28             ;273
00009a  0fc9              LSRS     r1,r1,#31             ;273
00009c  0fd2              LSRS     r2,r2,#31             ;273
00009e  4291              CMP      r1,r2                 ;273
0000a0  d102              BNE      |L6.168|
0000a2  e002              B        |L6.170|
                  |L6.164|
;;;275    					}
;;;276    					else if (PS2_Modifier.Attr.Shift)										// ignore caps lock
0000a4  0729              LSLS     r1,r5,#28
0000a6  d500              BPL      |L6.170|
                  |L6.168|
;;;277    					  key = Kbd_Code[key_code*2+1];			
0000a8  7844              LDRB     r4,[r0,#1]
                  |L6.170|
;;;278    				}
;;;279    					
;;;280    				Putchar(key);						
0000aa  4620              MOV      r0,r4
0000ac  f7fffffe          BL       Putchar
                  |L6.176|
;;;281    		}
;;;282    	}
;;;283    	PS2_Modifier.Attr.Extend = PS2_Modifier.Attr.Release = 0;
0000b0  4905              LDR      r1,|L6.200|
0000b2  22bf              MOVS     r2,#0xbf
0000b4  7808              LDRB     r0,[r1,#0]  ; PS2_Modifier
0000b6  0640              LSLS     r0,r0,#25
0000b8  0e40              LSRS     r0,r0,#25
0000ba  4010              ANDS     r0,r0,r2
0000bc  7008              STRB     r0,[r1,#0]
                  |L6.190|
;;;284    }	
0000be  b003              ADD      sp,sp,#0xc
0000c0  bdf0              POP      {r4-r7,pc}
;;;285    	
                          ENDP

0000c2  0000              DCW      0x0000
                  |L6.196|
                          DCD      Kbd_Code
                  |L6.200|
                          DCD      ||.data||
                  |L6.204|
0000cc  5b5c5d60          DCB      "[\\]`/",0
0000d0  2f00    
0000d2  00                DCB      0
0000d3  00                DCB      0

                          AREA ||i.PS2_Init||, CODE, READONLY, ALIGN=2

                  PS2_Init PROC
;;;37     
;;;38     void PS2_Init(void)
000000  b510              PUSH     {r4,lr}
;;;39     {
;;;40     	SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PA;		// EXTI1 = PA1 - PS/2 Clk
000002  4911              LDR      r1,|L7.72|
000004  2000              MOVS     r0,#0
000006  6088              STR      r0,[r1,#8]
;;;41     	EXTI->FTSR = EXTI_FTSR_TR1;											// Fall edge trigger PA1
000008  4910              LDR      r1,|L7.76|
00000a  2202              MOVS     r2,#2
00000c  60ca              STR      r2,[r1,#0xc]
;;;42     	EXTI->IMR |= EXTI_IMR_MR1;											// Unmask PA1
00000e  680b              LDR      r3,[r1,#0]
000010  4313              ORRS     r3,r3,r2
000012  600b              STR      r3,[r1,#0]
;;;43     	
;;;44     	PS2_IF.Init = 0;
000014  490e              LDR      r1,|L7.80|
000016  8008              STRH     r0,[r1,#0]
;;;45     	PS2_Fsm.State = PS2_UNKNOWN;
000018  490e              LDR      r1,|L7.84|
00001a  780a              LDRB     r2,[r1,#0]  ; PS2_Fsm
00001c  0892              LSRS     r2,r2,#2
00001e  0092              LSLS     r2,r2,#2
000020  700a              STRB     r2,[r1,#0]
;;;46     	PS2_Modifier.Init = 0;
000022  490d              LDR      r1,|L7.88|
000024  7008              STRB     r0,[r1,#0]
;;;47     	FIFO_Clear((FIFO*)PS2_Buf);
000026  480d              LDR      r0,|L7.92|
000028  f7fffffe          BL       FIFO_Clear
00002c  490c              LDR      r1,|L7.96|
00002e  6808              LDR      r0,[r1,#0]
000030  22ff              MOVS     r2,#0xff
000032  0212              LSLS     r2,r2,#8
000034  4390              BICS     r0,r0,r2
000036  2203              MOVS     r2,#3
000038  0392              LSLS     r2,r2,#14
00003a  4310              ORRS     r0,r0,r2
00003c  6008              STR      r0,[r1,#0]
00003e  4909              LDR      r1,|L7.100|
000040  2020              MOVS     r0,#0x20
000042  6008              STR      r0,[r1,#0]
;;;48     	
;;;49     	// NVIC IRQ
;;;50       NVIC_SetPriority(EXTI0_1_IRQn,PS2_IRQ_PRIORITY);// Lowest priority																	// Highest priority
;;;51       NVIC_EnableIRQ(EXTI0_1_IRQn);
;;;52     }
000044  bd10              POP      {r4,pc}
;;;53     
                          ENDP

000046  0000              DCW      0x0000
                  |L7.72|
                          DCD      0x40010000
                  |L7.76|
                          DCD      0x40010400
                  |L7.80|
                          DCD      ||.data||+0x4
                  |L7.84|
                          DCD      ||.data||+0x1
                  |L7.88|
                          DCD      ||.data||
                  |L7.92|
                          DCD      ||.data||+0x6
                  |L7.96|
                          DCD      0xe000e404
                  |L7.100|
                          DCD      0xe000e100

                          AREA ||i.PS2_Parity||, CODE, READONLY, ALIGN=1

                  PS2_Parity PROC
;;;134    // Calculate parity
;;;135    uint16_t PS2_Parity(uint8_t byte)
000000  2100              MOVS     r1,#0
;;;136    { uint8_t parity =0, i;
;;;137      
;;;138      for(i=8;i;i--)
000002  2208              MOVS     r2,#8
                  |L8.4|
;;;139      { parity += byte & 0x01;
000004  07c3              LSLS     r3,r0,#31
000006  0fdb              LSRS     r3,r3,#31
000008  1859              ADDS     r1,r3,r1
;;;140        byte >>=1;
00000a  1e52              SUBS     r2,r2,#1
00000c  0840              LSRS     r0,r0,#1
00000e  0612              LSLS     r2,r2,#24
000010  b2c9              UXTB     r1,r1                 ;139
000012  0e12              LSRS     r2,r2,#24
000014  d1f6              BNE      |L8.4|
;;;141      }
;;;142      return((parity & 0x01)?0:PS2_PARITY_BIT);
000016  07c8              LSLS     r0,r1,#31
000018  d001              BEQ      |L8.30|
00001a  2000              MOVS     r0,#0
;;;143    }
00001c  4770              BX       lr
                  |L8.30|
00001e  2001              MOVS     r0,#1                 ;142
000020  0240              LSLS     r0,r0,#9              ;142
000022  4770              BX       lr
;;;144    
                          ENDP


                          AREA ||i.PS2_Send||, CODE, READONLY, ALIGN=2

                  PS2_Send PROC
;;;97     
;;;98     uint8_t PS2_Send(uint8_t Cmd)
000000  b5f8              PUSH     {r3-r7,lr}
;;;99     { 
;;;100      uint8_t Timeout;
;;;101      
;;;102      // wait for bus idle
;;;103      for(Timeout=PS2_TIMEOUT;Timeout;Timeout--)
000002  24ff              MOVS     r4,#0xff
;;;104      {
;;;105        if((!PS2_IF.States.BitCnt)&&(PS2_PORT->IDR &PS2_CLK_BIT))
000004  4e22              LDR      r6,|L9.144|
000006  2709              MOVS     r7,#9
000008  4605              MOV      r5,r0                 ;99
00000a  06ff              LSLS     r7,r7,#27
                  |L9.12|
00000c  7870              LDRB     r0,[r6,#1]  ; PS2_IF
00000e  0640              LSLS     r0,r0,#25
000010  0f00              LSRS     r0,r0,#28
000012  d134              BNE      |L9.126|
000014  8a38              LDRH     r0,[r7,#0x10]
000016  0780              LSLS     r0,r0,#30
000018  d531              BPL      |L9.126|
00001a  481e              LDR      r0,|L9.148|
00001c  2320              MOVS     r3,#0x20
00001e  6003              STR      r3,[r0,#0]
000020  2100              MOVS     r1,#0
;;;106        { 
;;;107    			NVIC_DisableIRQ(EXTI0_1_IRQn);
;;;108    
;;;109    			// Format the bitstream to be send to the keyboard
;;;110          PS2_IF.States.Code = (Cmd<<1)|PS2_Parity(Cmd)|PS2_STOP_BIT;
000022  4628              MOV      r0,r5
000024  2208              MOVS     r2,#8
                  |L9.38|
000026  07c4              LSLS     r4,r0,#31
000028  0fe4              LSRS     r4,r4,#31
00002a  1861              ADDS     r1,r4,r1
00002c  1e52              SUBS     r2,r2,#1
00002e  0840              LSRS     r0,r0,#1
000030  0612              LSLS     r2,r2,#24
000032  b2c9              UXTB     r1,r1
000034  0e12              LSRS     r2,r2,#24
000036  d1f6              BNE      |L9.38|
000038  07c8              LSLS     r0,r1,#31
00003a  d001              BEQ      |L9.64|
00003c  2000              MOVS     r0,#0
00003e  e001              B        |L9.68|
                  |L9.64|
000040  2001              MOVS     r0,#1
000042  0240              LSLS     r0,r0,#9
                  |L9.68|
000044  0069              LSLS     r1,r5,#1
000046  4308              ORRS     r0,r0,r1
000048  2101              MOVS     r1,#1
00004a  0289              LSLS     r1,r1,#10
00004c  4308              ORRS     r0,r0,r1
00004e  8831              LDRH     r1,[r6,#0]  ; PS2_IF
000050  0ac9              LSRS     r1,r1,#11
000052  02c9              LSLS     r1,r1,#11
000054  4301              ORRS     r1,r1,r0
000056  8031              STRH     r1,[r6,#0]
;;;111    			PS2_IF.States.WriteMode = 1;
000058  7870              LDRB     r0,[r6,#1]  ; PS2_IF
00005a  2180              MOVS     r1,#0x80
00005c  4308              ORRS     r0,r0,r1
00005e  7070              STRB     r0,[r6,#1]
000060  480d              LDR      r0,|L9.152|
000062  6003              STR      r3,[r0,#0]
;;;112    			
;;;113    			NVIC_EnableIRQ(EXTI0_1_IRQn);
;;;114    			
;;;115          // Wait at least 100us
;;;116    			Delay(us_to_Tick(PS2_CMD_START_us));
000064  2004              MOVS     r0,#4
000066  f7fffffe          BL       Delay
;;;117    			
;;;118          // Set Clk low
;;;119    			PS2_PORT->BSRR = PIN_CLR(PS2_CLK);
00006a  2001              MOVS     r0,#1
00006c  0440              LSLS     r0,r0,#17
00006e  61b8              STR      r0,[r7,#0x18]
;;;120    
;;;121          // Wait at least 100us
;;;122    			Delay(us_to_Tick(PS2_CMD_START_us));
000070  2004              MOVS     r0,#4
000072  f7fffffe          BL       Delay
;;;123    
;;;124          // Set Clk high
;;;125    			PS2_PORT->BSRR = PIN_SET(PS2_CLK);
000076  2002              MOVS     r0,#2
000078  61b8              STR      r0,[r7,#0x18]
;;;126    
;;;127          return(1);
00007a  2001              MOVS     r0,#1
;;;128        }
;;;129        Delay(us_to_Tick(PS2_BUSY_WAIT_us));
;;;130       }
;;;131      return (0);
;;;132    }
00007c  bdf8              POP      {r3-r7,pc}
                  |L9.126|
00007e  2007              MOVS     r0,#7                 ;129
000080  f7fffffe          BL       Delay
000084  1e64              SUBS     r4,r4,#1              ;129
000086  0624              LSLS     r4,r4,#24             ;103
000088  0e24              LSRS     r4,r4,#24             ;103
00008a  d1bf              BNE      |L9.12|
00008c  2000              MOVS     r0,#0                 ;131
00008e  bdf8              POP      {r3-r7,pc}
;;;133    
                          ENDP

                  |L9.144|
                          DCD      ||.data||+0x4
                  |L9.148|
                          DCD      0xe000e180
                  |L9.152|
                          DCD      0xe000e100

                          AREA ||i.PS2_Task||, CODE, READONLY, ALIGN=2

                  PS2_Task PROC
;;;152    
;;;153    void PS2_Task(void)
000000  b510              PUSH     {r4,lr}
;;;154    {
;;;155    	uint8_t ps2_data;
;;;156    
;;;157    	ps2_data = Getc((FIFO*)PS2_Buf);
000002  482b              LDR      r0,|L10.176|
000004  f7fffffe          BL       Getc
;;;158    	
;;;159    	if (ps2_data ==PS2_KBD_ERR_CODE)
;;;160    	{ 
;;;161    		PS2_Fsm.State = PS2_UNKNOWN;
000008  4c2a              LDR      r4,|L10.180|
00000a  28ff              CMP      r0,#0xff              ;159
00000c  d00e              BEQ      |L10.44|
;;;162    		PS2_Send(PS2_CMD_RESET);
;;;163    	  return;
;;;164    	}
;;;165    	else if (ps2_data == PS2_RESPOND_INIT_OK)
00000e  28aa              CMP      r0,#0xaa
000010  d014              BEQ      |L10.60|
;;;166    	{
;;;167    		PS2_Fsm.State = PS2_KBD_RDY;						// Power on reset
;;;168    		return;
;;;169    	}
;;;170    	
;;;171    	switch(PS2_Fsm.State)
000012  7821              LDRB     r1,[r4,#0]  ; PS2_Fsm
000014  078a              LSLS     r2,r1,#30
000016  0f92              LSRS     r2,r2,#30
000018  d016              BEQ      |L10.72|
00001a  2a01              CMP      r2,#1
00001c  d01a              BEQ      |L10.84|
00001e  2a02              CMP      r2,#2
000020  d02e              BEQ      |L10.128|
000022  2a03              CMP      r2,#3
000024  d109              BNE      |L10.58|
;;;172    	{
;;;173    		case PS2_UNKNOWN:
;;;174    		  if(ps2_data ==PS2_RESPOND_ACK)
;;;175    			{
;;;176    		    PS2_Send(PS2_CMD_RESET);
;;;177    				break;
;;;178    			}
;;;179    			else			
;;;180    				// uP came out of reset while keyboard already up
;;;181    				PS2_Fsm.State = PS2_KBD_RDY;
;;;182    				// fall through
;;;183    	
;;;184    		case PS2_KBD_RDY:		
;;;185    		  switch(ps2_data)
;;;186    			{
;;;187    				case PS2_KBD_CODE_EXTENDED:
;;;188    					PS2_Modifier.Attr.Extend = 1;
;;;189    				  break;
;;;190    				
;;;191    				case PS2_KBD_CODE_RELEASE:
;;;192    					PS2_Modifier.Attr.Release = 1;
;;;193    				  break;
;;;194    				
;;;195    				default:
;;;196    					if (ps2_data >0)
;;;197    			    { 
;;;198    						PS2_Decode(ps2_data);
;;;199    					}
;;;200    				}		
;;;201    		  break;
;;;202    			
;;;203    		case PS2_CMD:					
;;;204    			switch(ps2_data)
;;;205    			{
;;;206    				case PS2_RESPOND_ACK:
;;;207    					PS2_Send(PS2_Cmd_Arg);
;;;208    					PS2_Fsm.State = PS2_CMD_ACK;
;;;209    					break;
;;;210    				case PS2_RESPOND_RESEND:
;;;211    					PS2_Send(PS2_Cmd);		
;;;212    				  break;
;;;213    				default:
;;;214    					PS2_Fsm.State = PS2_UNKNOWN;
;;;215    				}
;;;216    			break;		
;;;217    			
;;;218    		case PS2_CMD_ACK:
;;;219    			if (ps2_data == PS2_RESPOND_ACK)	
000026  28fa              CMP      r0,#0xfa
000028  d03d              BEQ      |L10.166|
00002a  e02e              B        |L10.138|
                  |L10.44|
00002c  7820              LDRB     r0,[r4,#0]            ;161  ; PS2_Fsm
00002e  0880              LSRS     r0,r0,#2              ;161
000030  0080              LSLS     r0,r0,#2              ;161
000032  7020              STRB     r0,[r4,#0]            ;161
000034  20ff              MOVS     r0,#0xff              ;162
000036  f7fffffe          BL       PS2_Send
                  |L10.58|
;;;220    		    PS2_Fsm.State = PS2_KBD_RDY;
;;;221    			else
;;;222    				PS2_Fsm.State = PS2_UNKNOWN;
;;;223    			break;
;;;224    	}
;;;225    }
00003a  bd10              POP      {r4,pc}
                  |L10.60|
00003c  7820              LDRB     r0,[r4,#0]            ;167  ; PS2_Fsm
00003e  0880              LSRS     r0,r0,#2              ;167
000040  0080              LSLS     r0,r0,#2              ;167
000042  1c40              ADDS     r0,r0,#1              ;167
000044  7020              STRB     r0,[r4,#0]            ;167
                  |L10.70|
000046  bd10              POP      {r4,pc}
                  |L10.72|
000048  28fa              CMP      r0,#0xfa              ;174
00004a  d00d              BEQ      |L10.104|
00004c  0889              LSRS     r1,r1,#2              ;181
00004e  0089              LSLS     r1,r1,#2              ;181
000050  1c49              ADDS     r1,r1,#1              ;181
000052  7021              STRB     r1,[r4,#0]            ;181
                  |L10.84|
000054  4918              LDR      r1,|L10.184|
000056  28e0              CMP      r0,#0xe0              ;185
000058  d008              BEQ      |L10.108|
00005a  28f0              CMP      r0,#0xf0              ;185
00005c  d00b              BEQ      |L10.118|
00005e  2800              CMP      r0,#0                 ;196
000060  d0f1              BEQ      |L10.70|
000062  f7fffffe          BL       PS2_Decode
000066  bd10              POP      {r4,pc}
                  |L10.104|
000068  20ff              MOVS     r0,#0xff              ;176
00006a  e019              B        |L10.160|
                  |L10.108|
00006c  7808              LDRB     r0,[r1,#0]            ;188  ; PS2_Modifier
00006e  2240              MOVS     r2,#0x40              ;188
000070  4310              ORRS     r0,r0,r2              ;188
000072  7008              STRB     r0,[r1,#0]            ;188
000074  bd10              POP      {r4,pc}
                  |L10.118|
000076  7808              LDRB     r0,[r1,#0]            ;192  ; PS2_Modifier
000078  2280              MOVS     r2,#0x80              ;192
00007a  4310              ORRS     r0,r0,r2              ;192
00007c  7008              STRB     r0,[r1,#0]            ;192
00007e  bd10              POP      {r4,pc}
                  |L10.128|
000080  4a0d              LDR      r2,|L10.184|
000082  28fa              CMP      r0,#0xfa              ;204
000084  d004              BEQ      |L10.144|
000086  28fe              CMP      r0,#0xfe              ;204
000088  d009              BEQ      |L10.158|
                  |L10.138|
00008a  0888              LSRS     r0,r1,#2              ;214
00008c  0080              LSLS     r0,r0,#2              ;214
00008e  e00d              B        |L10.172|
                  |L10.144|
000090  78d0              LDRB     r0,[r2,#3]            ;207  ; PS2_Cmd_Arg
000092  f7fffffe          BL       PS2_Send
000096  7820              LDRB     r0,[r4,#0]            ;208  ; PS2_Fsm
000098  2103              MOVS     r1,#3                 ;208
00009a  4308              ORRS     r0,r0,r1              ;208
00009c  e006              B        |L10.172|
                  |L10.158|
00009e  7890              LDRB     r0,[r2,#2]            ;211  ; PS2_Cmd
                  |L10.160|
0000a0  f7fffffe          BL       PS2_Send
0000a4  bd10              POP      {r4,pc}
                  |L10.166|
0000a6  0888              LSRS     r0,r1,#2              ;220
0000a8  0080              LSLS     r0,r0,#2              ;220
0000aa  1c40              ADDS     r0,r0,#1              ;220
                  |L10.172|
0000ac  7020              STRB     r0,[r4,#0]            ;222
0000ae  bd10              POP      {r4,pc}
;;;226    
                          ENDP

                  |L10.176|
                          DCD      ||.data||+0x6
                  |L10.180|
                          DCD      ||.data||+0x1
                  |L10.184|
                          DCD      ||.data||

                          AREA ||i.PS2_Update_LED||, CODE, READONLY, ALIGN=2

                  PS2_Update_LED PROC
;;;144    
;;;145    void PS2_Update_LED(uint8_t LED)
000000  b510              PUSH     {r4,lr}
;;;146    {	
;;;147    	PS2_Fsm.State = PS2_CMD;	
000002  4907              LDR      r1,|L11.32|
000004  780a              LDRB     r2,[r1,#0]  ; PS2_Fsm
000006  0892              LSRS     r2,r2,#2
000008  0092              LSLS     r2,r2,#2
00000a  1c92              ADDS     r2,r2,#2
00000c  700a              STRB     r2,[r1,#0]
;;;148    	PS2_Cmd = PS2_KBD_CMD_LED;
00000e  4905              LDR      r1,|L11.36|
000010  22ed              MOVS     r2,#0xed
000012  708a              STRB     r2,[r1,#2]
;;;149    	PS2_Cmd_Arg = LED;			
000014  70c8              STRB     r0,[r1,#3]
;;;150    	PS2_Send(PS2_Cmd);
000016  4610              MOV      r0,r2
000018  f7fffffe          BL       PS2_Send
;;;151    }
00001c  bd10              POP      {r4,pc}
;;;152    
                          ENDP

00001e  0000              DCW      0x0000
                  |L11.32|
                          DCD      ||.data||+0x1
                  |L11.36|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=1

                  PS2_Modifier
000000  00                DCB      0x00
                  PS2_Fsm
000001  00                DCB      0x00
                  PS2_Cmd
000002  00                DCB      0x00
                  PS2_Cmd_Arg
000003  00                DCB      0x00
                  PS2_IF
000004  0000              DCB      0x00,0x00
                  PS2_Buf
000006  0300              DCB      0x03,0x00
                          DCDU     0x00000000
00000c  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "ps2.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_ps2_c_PS2_Buf____REV16|
#line 129 "C:\\CAD\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_ps2_c_PS2_Buf____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_ps2_c_PS2_Buf____REVSH|
#line 144
|__asm___5_ps2_c_PS2_Buf____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
